"use strict";(self.webpackChunkjob=self.webpackChunkjob||[]).push([[2197],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting Started","href":"/interview","docId":"getting-started"},{"type":"category","label":"Questions","collapsible":false,"collapsed":false,"items":[{"type":"category","label":"Javascript","collapsible":true,"collapsed":true,"className":"hide-questions","items":[{"type":"link","label":"Explain  arguments object","href":"/questions/javascript/arguments-object","docId":"questions/javascript/arguments-object"},{"type":"link","label":"What is an arrow function and its specifics?","href":"/questions/javascript/arrow-functions","docId":"questions/javascript/arrow-functions"},{"type":"link","label":"Explain `async` and`await` keywords","href":"/questions/javascript/async-await-keywords","docId":"questions/javascript/async-await-keywords"},{"type":"link","label":"What is a closure in JavaScript?","href":"/questions/javascript/closure","docId":"questions/javascript/closure"},{"type":"link","label":"What are promise common pitfalls?","href":"/questions/javascript/common-promise-pitfalls","docId":"questions/javascript/common-promise-pitfalls"},{"type":"link","label":"Why is the result of comparing 2 similar objects `false`?","href":"/questions/javascript/comparing-two-similiar-objects","docId":"questions/javascript/comparing-two-similiar-objects"},{"type":"link","label":"What tools do you use when debugging?","href":"/questions/javascript/debugging","docId":"questions/javascript/debugging"},{"type":"link","label":"Explain the difference between null, undefined and undeclared","href":"/questions/javascript/diff-null-undefined-undeclared","docId":"questions/javascript/diff-null-undefined-undeclared"},{"type":"link","label":"How do you handle errors in JavaScript?","href":"/questions/javascript/error-handling","docId":"questions/javascript/error-handling"},{"type":"link","label":"What are function arguments?","href":"/questions/javascript/function-arguments","docId":"questions/javascript/function-arguments"},{"type":"link","label":"What is Function Composition?","href":"/questions/javascript/function-composition","docId":"questions/javascript/function-composition"},{"type":"link","label":"What is a Generator function?","href":"/questions/javascript/generator-function","docId":"questions/javascript/generator-function"},{"type":"link","label":"How to handle multiple asynchronous operations?","href":"/questions/javascript/handling-multiple-async-operations","docId":"questions/javascript/handling-multiple-async-operations"},{"type":"link","label":"What is a higher-order function?","href":"/questions/javascript/higher-order-function","docId":"questions/javascript/higher-order-function"},{"type":"link","label":"What is hoisting in JavaScript?","href":"/questions/javascript/hoisting","docId":"questions/javascript/hoisting"},{"type":"link","label":"How to use bind, apply and call?","href":"/questions/javascript/how-to-bind-apply-call","docId":"questions/javascript/how-to-bind-apply-call"},{"type":"link","label":"How to clone an object?","href":"/questions/javascript/how-to-clone-object","docId":"questions/javascript/how-to-clone-object"},{"type":"link","label":"How to use `new Function()`?","href":"/questions/javascript/how-to-use-new-function","docId":"questions/javascript/how-to-use-new-function"},{"type":"link","label":"What do Javascript types exist?","href":"/questions/javascript/javascript-types","docId":"questions/javascript/javascript-types"},{"type":"link","label":"What are `Map` and `Set` objects?","href":"/questions/javascript/map-set-objects","docId":"questions/javascript/map-set-objects"},{"type":"link","label":"Explain Mutable and Immutable values","href":"/questions/javascript/mutable-vs-immutable-values","docId":"questions/javascript/mutable-vs-immutable-values"},{"type":"link","label":"How do object prototypes work?","href":"/questions/javascript/object-prototypes","docId":"questions/javascript/object-prototypes"},{"type":"link","label":"Tell about JS Operators","href":"/questions/javascript/operators","docId":"questions/javascript/operators"},{"type":"link","label":"What is promise chaining","href":"/questions/javascript/promise-chaining","docId":"questions/javascript/promise-chaining"},{"type":"link","label":"How to handle promise errors?","href":"/questions/javascript/promise-error-handling","docId":"questions/javascript/promise-error-handling"},{"type":"link","label":"What is a Promise?","href":"/questions/javascript/promise-object","docId":"questions/javascript/promise-object"},{"type":"link","label":"What is the `Proxy` object used for?","href":"/questions/javascript/proxy-object","docId":"questions/javascript/proxy-object"},{"type":"link","label":"What is a pure function?","href":"/questions/javascript/pure-function","docId":"questions/javascript/pure-function"},{"type":"link","label":"Why is it better to leave the global scope \\"as is\\" and not touch it?","href":"/questions/javascript/pure-global-scope","docId":"questions/javascript/pure-global-scope"},{"type":"link","label":"Explain type converting in JS","href":"/questions/javascript/type-converting","docId":"questions/javascript/type-converting"},{"type":"link","label":"What is the difference between undefined and is not defined?","href":"/questions/javascript/undefined-vs-not-defined","docId":"questions/javascript/undefined-vs-not-defined"},{"type":"link","label":"Explain difference var vs let vs const","href":"/questions/javascript/variable-declarations","docId":"questions/javascript/variable-declarations"},{"type":"link","label":"What are `WeakMap` and `WeakSet` objects?","href":"/questions/javascript/weakmap-weakset-objects","docId":"questions/javascript/weakmap-weakset-objects"},{"type":"link","label":"What do you know about AJAX?","href":"/questions/javascript/what-is-ajax","docId":"questions/javascript/what-is-ajax"},{"type":"link","label":"What is a callback function?","href":"/questions/javascript/what-is-callback","docId":"questions/javascript/what-is-callback"},{"type":"link","label":"What is a function?","href":"/questions/javascript/what-is-function","docId":"questions/javascript/what-is-function"},{"type":"link","label":"What is JavaScript?","href":"/questions/javascript/what-is-javascript","docId":"questions/javascript/what-is-javascript"},{"type":"link","label":"What is NaN?","href":"/questions/javascript/what-is-nan","docId":"questions/javascript/what-is-nan"},{"type":"link","label":"What is an object?","href":"/questions/javascript/what-is-object","docId":"questions/javascript/what-is-object"},{"type":"link","label":"What is `this`?","href":"/questions/javascript/what-is-this","docId":"questions/javascript/what-is-this"},{"type":"link","label":"Why to use `new` keyword?","href":"/questions/javascript/why-to-use-new-keyword","docId":"questions/javascript/why-to-use-new-keyword"}],"href":"/questions/javascript/"},{"type":"category","label":"Typescript","collapsible":true,"collapsed":true,"className":"hide-questions","items":[{"type":"link","label":"What is an abstract class?","href":"/questions/typescript/abstract-class","docId":"questions/typescript/abstract-class"},{"type":"link","label":"Explain `any` vs `unknown`","href":"/questions/typescript/any-vs-unknown","docId":"questions/typescript/any-vs-unknown"},{"type":"link","label":"What is conditional type and how to create?","href":"/questions/typescript/conditional-type","docId":"questions/typescript/conditional-type"},{"type":"link","label":"What is `enum` and why to use?","href":"/questions/typescript/enum-type","docId":"questions/typescript/enum-type"},{"type":"link","label":"What is difference between enum vs const?","href":"/questions/typescript/enum-vs-const","docId":"questions/typescript/enum-vs-const"},{"type":"link","label":"Interfaces vs Types","href":"/questions/typescript/interface-vs-type","docId":"questions/typescript/interface-vs-type"},{"type":"link","label":"Why and how to use `never`?","href":"/questions/typescript/never-type","docId":"questions/typescript/never-type"},{"type":"link","label":"What is `as` syntax in TypeScript?","href":"/questions/typescript/ts-as","docId":"questions/typescript/ts-as"},{"type":"link","label":"What is the `declare` keyword in TypeScript?","href":"/questions/typescript/ts-declare","docId":"questions/typescript/ts-declare"},{"type":"link","label":"What is a decorator?","href":"/questions/typescript/ts-decorator","docId":"questions/typescript/ts-decorator"},{"type":"link","label":"What is a generic type?","href":"/questions/typescript/ts-generics","docId":"questions/typescript/ts-generics"},{"type":"link","label":"What is `implement` clause?","href":"/questions/typescript/ts-implement","docId":"questions/typescript/ts-implement"},{"type":"link","label":"What is ts Mixin?","href":"/questions/typescript/ts-mixin","docId":"questions/typescript/ts-mixin"},{"type":"link","label":"What is `namespace` and how to declare it?","href":"/questions/typescript/ts-namespace","docId":"questions/typescript/ts-namespace"},{"type":"link","label":"Function overloading typescript","href":"/questions/typescript/ts-overloading","docId":"questions/typescript/ts-overloading"},{"type":"link","label":"Tell about public vs private vs protected","href":"/questions/typescript/ts-public-private-protected","docId":"questions/typescript/ts-public-private-protected"},{"type":"link","label":"What is `typeof` operator?","href":"/questions/typescript/ts-typeof","docId":"questions/typescript/ts-typeof"},{"type":"link","label":"What is the use of the tsconfig.json?","href":"/questions/typescript/tsconfig-file","docId":"questions/typescript/tsconfig-file"},{"type":"link","label":"What ts benefits you know?","href":"/questions/typescript/typescript-benefits","docId":"questions/typescript/typescript-benefits"},{"type":"link","label":"Describe Unions and Intersection Types","href":"/questions/typescript/union-intersection","docId":"questions/typescript/union-intersection"},{"type":"link","label":"What utility types exist and their usage","href":"/questions/typescript/utility-types","docId":"questions/typescript/utility-types"},{"type":"link","label":"Explain `void` vs `undefined`","href":"/questions/typescript/void-vs-undefined","docId":"questions/typescript/void-vs-undefined"},{"type":"link","label":"What is TypeScript?","href":"/questions/typescript/what-is-typescript","docId":"questions/typescript/what-is-typescript"}],"href":"/questions/typescript/"},{"type":"category","label":"Frontend","collapsible":true,"collapsed":true,"className":"hide-questions","items":[{"type":"link","label":"What is the purpose of the\xa0`alt`\xa0attribute on images?","href":"/questions/frontend/alt-attribute","docId":"questions/frontend/alt-attribute"},{"type":"link","label":"What are the different ways to apply CSS to an HTML document?","href":"/questions/frontend/apply-css-html-document","docId":"questions/frontend/apply-css-html-document"},{"type":"link","label":"What is the purpose of cache?","href":"/questions/frontend/browser-cache","docId":"questions/frontend/browser-cache"},{"type":"link","label":"What is an Event Loop?","href":"/questions/frontend/browser-event-loop","docId":"questions/frontend/browser-event-loop"},{"type":"link","label":"When to use Microtasks?","href":"/questions/frontend/browser-microtasks","docId":"questions/frontend/browser-microtasks"},{"type":"link","label":"How does the browser rendering engine work?","href":"/questions/frontend/browser-rendering-engine","docId":"questions/frontend/browser-rendering-engine"},{"type":"link","label":"What is At-Rule `@`?","href":"/questions/frontend/css-at-rule","docId":"questions/frontend/css-at-rule"},{"type":"link","label":"Explain the CSS \\"box model\\"","href":"/questions/frontend/css-box-model","docId":"questions/frontend/css-box-model"},{"type":"link","label":"How does CSS work under the hood?","href":"/questions/frontend/css-engine","docId":"questions/frontend/css-engine"},{"type":"link","label":"When to use css grid and flexbox?","href":"/questions/frontend/css-grid-vs-flexbox","docId":"questions/frontend/css-grid-vs-flexbox"},{"type":"link","label":"Explain CSS position property?","href":"/questions/frontend/css-position","docId":"questions/frontend/css-position"},{"type":"link","label":"What is CSS preprocessor?","href":"/questions/frontend/css-preprocessor","docId":"questions/frontend/css-preprocessor"},{"type":"link","label":"What are the CSS selectors?","href":"/questions/frontend/css-selectors","docId":"questions/frontend/css-selectors"},{"type":"link","label":"What are the different types of CSS units, and how do they work?","href":"/questions/frontend/css-units","docId":"questions/frontend/css-units"},{"type":"link","label":"Explain the pros and cons for CSS animations vs JS animations?","href":"/questions/frontend/css-vs-js-animations","docId":"questions/frontend/css-vs-js-animations"},{"type":"link","label":"What is CSS?","href":"/questions/frontend/css","docId":"questions/frontend/css"},{"type":"link","label":"What is the difference between attributes and properties?","href":"/questions/frontend/dom-attributes-properties","docId":"questions/frontend/dom-attributes-properties"},{"type":"link","label":"What is DOM?","href":"/questions/frontend/dom","docId":"questions/frontend/dom"},{"type":"link","label":"What does\xa0`enctype` attribute\xa0mean?","href":"/questions/frontend/enctype-attribute","docId":"questions/frontend/enctype-attribute"},{"type":"link","label":"What is Event Bubbling?","href":"/questions/frontend/event-bubbling","docId":"questions/frontend/event-bubbling"},{"type":"link","label":"What is Event Capturing?","href":"/questions/frontend/event-capturing","docId":"questions/frontend/event-capturing"},{"type":"link","label":"What is Event Propagation?","href":"/questions/frontend/event-propagation","docId":"questions/frontend/event-propagation"},{"type":"link","label":"What ARIA and screenreaders are?","href":"/questions/frontend/html-aria","docId":"questions/frontend/html-aria"},{"type":"link","label":"What is an iframe and how it works?","href":"/questions/frontend/html-iframe","docId":"questions/frontend/html-iframe"},{"type":"link","label":"What is HTML?","href":"/questions/frontend/html","docId":"questions/frontend/html"},{"type":"link","label":"What image replacement techniques you know, and which do you use?","href":"/questions/frontend/image-replacement","docId":"questions/frontend/image-replacement"},{"type":"link","label":"What is the purpose of meta tags?","href":"/questions/frontend/meta-tags","docId":"questions/frontend/meta-tags"},{"type":"link","label":"What is desktop first and mobile first design approach?","href":"/questions/frontend/mobile-vs-desktop-first-approach","docId":"questions/frontend/mobile-vs-desktop-first-approach"},{"type":"link","label":"What is the difference between \\"padding\\" and \\"margin\\" in CSS?","href":"/questions/frontend/padding-vs-margin","docId":"questions/frontend/padding-vs-margin"},{"type":"link","label":"What is progressive rendering?","href":"/questions/frontend/progressive-rendering","docId":"questions/frontend/progressive-rendering"},{"type":"link","label":"What is the difference between pseudo-class and pseudo-element?","href":"/questions/frontend/pseudo-class-vs-element","docId":"questions/frontend/pseudo-class-vs-element"},{"type":"link","label":"Explain the use of `rel=\\"nofollow\\"`, `rel=\\"noreferrer\\"`, `rel=\\"noopener\\"` attributes?","href":"/questions/frontend/rel-nofollow-noreferrer-noopener","docId":"questions/frontend/rel-nofollow-noreferrer-noopener"},{"type":"link","label":"What is the difference between \\"resetting\\" and \\"normalizing\\" CSS?","href":"/questions/frontend/reset-vs-normilize","docId":"questions/frontend/reset-vs-normilize"},{"type":"link","label":"What is the responsive design, and how do you implement it?","href":"/questions/frontend/responsive-design","docId":"questions/frontend/responsive-design"},{"type":"link","label":"What does async and defer refer in a script tag?","href":"/questions/frontend/script-async-defer","docId":"questions/frontend/script-async-defer"},{"type":"link","label":"What is SPA and how to make it SEO-friendly?","href":"/questions/frontend/spa-and-seo","docId":"questions/frontend/spa-and-seo"},{"type":"link","label":"What is difference between\xa0`span`\xa0tag and\xa0`div`\xa0tag?","href":"/questions/frontend/span-vs-div","docId":"questions/frontend/span-vs-div"},{"type":"link","label":"Ways to store data in browser?","href":"/questions/frontend/store-data-browser","docId":"questions/frontend/store-data-browser"},{"type":"link","label":"Explain the diff Tasks vs Microtasks","href":"/questions/frontend/tasks-vs-microtasks","docId":"questions/frontend/tasks-vs-microtasks"},{"type":"link","label":"Explain the diff `translate` vs positioning","href":"/questions/frontend/translate-vs-position","docId":"questions/frontend/translate-vs-position"},{"type":"link","label":"What is UI/UX?","href":"/questions/frontend/ui-ux","docId":"questions/frontend/ui-ux"},{"type":"link","label":"Ways to improve website performance","href":"/questions/frontend/website-perfomance","docId":"questions/frontend/website-perfomance"}],"href":"/questions/frontend/"},{"type":"category","label":"ReactJS","collapsible":true,"collapsed":true,"className":"hide-questions","items":[{"type":"link","label":"What is the diff between class vs functional components?","href":"/questions/reactjs/class-vs-functional-components","docId":"questions/reactjs/class-vs-functional-components"},{"type":"link","label":"What are controlled and uncontrolled components?","href":"/questions/reactjs/controlled-vs-uncontrolled-components","docId":"questions/reactjs/controlled-vs-uncontrolled-components"},{"type":"link","label":"How to use `innerHTML` in React?","href":"/questions/reactjs/dangerously-set-inner-html","docId":"questions/reactjs/dangerously-set-inner-html"},{"type":"link","label":"What is a higher order component?","href":"/questions/reactjs/higher-order-component","docId":"questions/reactjs/higher-order-component"},{"type":"link","label":"How to update a component every second?","href":"/questions/reactjs/how-to-update-component-every-second","docId":"questions/reactjs/how-to-update-component-every-second"},{"type":"link","label":"What is JSX?","href":"/questions/reactjs/jsx","docId":"questions/reactjs/jsx"},{"type":"link","label":"Why to use `key` prop for list items?","href":"/questions/reactjs/key-prop","docId":"questions/reactjs/key-prop"},{"type":"link","label":"What is the diff between Presentational vs Container components?","href":"/questions/reactjs/presentational-vs-container-components","docId":"questions/reactjs/presentational-vs-container-components"},{"type":"link","label":"What are error boundaries in React?","href":"/questions/reactjs/react-error-boundaries","docId":"questions/reactjs/react-error-boundaries"},{"type":"link","label":"What is React Fiber?","href":"/questions/reactjs/react-fiber","docId":"questions/reactjs/react-fiber"},{"type":"link","label":"What is a React.Fragment `</>`?","href":"/questions/reactjs/react-fragment","docId":"questions/reactjs/react-fragment"},{"type":"link","label":"What rules need to be followed for hooks?","href":"/questions/reactjs/react-hook-rules","docId":"questions/reactjs/react-hook-rules"},{"type":"link","label":"Explain React Hooks","href":"/questions/reactjs/react-hooks","docId":"questions/reactjs/react-hooks"},{"type":"link","label":"What is React lazy function?","href":"/questions/reactjs/react-lazy","docId":"questions/reactjs/react-lazy"},{"type":"link","label":"What are portals in React?","href":"/questions/reactjs/react-portal","docId":"questions/reactjs/react-portal"},{"type":"link","label":"What is React Router?","href":"/questions/reactjs/react-router","docId":"questions/reactjs/react-router"},{"type":"link","label":"How can you optimize performance in a ReactJS app?","href":"/questions/reactjs/reactjs-app-perfomance","docId":"questions/reactjs/reactjs-app-perfomance"},{"type":"link","label":"How to bind methods in JSX callbacks?","href":"/questions/reactjs/reactjs-bind-methods","docId":"questions/reactjs/reactjs-bind-methods"},{"type":"link","label":"What is React Context?","href":"/questions/reactjs/reactjs-context","docId":"questions/reactjs/reactjs-context"},{"type":"link","label":"What is the diff Element vs Component?","href":"/questions/reactjs/reactjs-element-vs-component","docId":"questions/reactjs/reactjs-element-vs-component"},{"type":"link","label":"Explain a ReactJS lifecycle","href":"/questions/reactjs/reactjs-lifecycle","docId":"questions/reactjs/reactjs-lifecycle"},{"type":"link","label":"What is ReactJS `ref`?","href":"/questions/reactjs/reactjs-refs","docId":"questions/reactjs/reactjs-refs"},{"type":"link","label":"What are the diff\xa0`redux-saga`\xa0vs\xa0`redux-thunk`?","href":"/questions/reactjs/redux-saga-vs-thunk","docId":"questions/reactjs/redux-saga-vs-thunk"},{"type":"link","label":"What is Redux?","href":"/questions/reactjs/redux","docId":"questions/reactjs/redux"},{"type":"link","label":"What is the diff between state vs props?","href":"/questions/reactjs/state-vs-props","docId":"questions/reactjs/state-vs-props"},{"type":"link","label":"What is the SyntheticEvent in ReactJS?","href":"/questions/reactjs/synthetic-event","docId":"questions/reactjs/synthetic-event"},{"type":"link","label":"Explain usage of `this.setState`","href":"/questions/reactjs/this-set-state","docId":"questions/reactjs/this-set-state"},{"type":"link","label":"How to use `useDeferredValue` hook?","href":"/questions/reactjs/use-deffered-value-hook","docId":"questions/reactjs/use-deffered-value-hook"},{"type":"link","label":"What is `useEffect` hook?","href":"/questions/reactjs/use-effect-hook","docId":"questions/reactjs/use-effect-hook"},{"type":"link","label":"What is the diff between `useMemo` vs `useCallback` hooks?","href":"/questions/reactjs/use-memo-vs-use-callback","docId":"questions/reactjs/use-memo-vs-use-callback"},{"type":"link","label":"What is the diff `useState` vs `useRef`?","href":"/questions/reactjs/use-state-vs-use-ref","docId":"questions/reactjs/use-state-vs-use-ref"},{"type":"link","label":"Why to use virtual DOM?","href":"/questions/reactjs/virtual-dom","docId":"questions/reactjs/virtual-dom"},{"type":"link","label":"What is ReactJS?","href":"/questions/reactjs/what-is-reactjs","docId":"questions/reactjs/what-is-reactjs"},{"type":"link","label":"When to use a Class over a Function component?","href":"/questions/reactjs/when-use-class-component","docId":"questions/reactjs/when-use-class-component"}],"href":"/questions/reactjs/"},{"type":"category","label":"NodeJS","collapsible":true,"collapsed":true,"className":"hide-questions","items":[{"type":"link","label":"What is the diff synchronous vs asynchronous code?","href":"/questions/nodejs/async-vs-sync","docId":"questions/nodejs/async-vs-sync"},{"type":"link","label":"What is a child process in NodeJS?","href":"/questions/nodejs/child-process","docId":"questions/nodejs/child-process"},{"type":"link","label":"What is chrome v8 engine?","href":"/questions/nodejs/chrome-v8-engine","docId":"questions/nodejs/chrome-v8-engine"},{"type":"link","label":"What is daemon process?","href":"/questions/nodejs/daemon-process","docId":"questions/nodejs/daemon-process"},{"type":"link","label":"What is an Event Emitter in NodeJS?","href":"/questions/nodejs/event-emitter","docId":"questions/nodejs/event-emitter"},{"type":"link","label":"Why should you separate express `app` and `server`?","href":"/questions/nodejs/express-app-vs-server","docId":"questions/nodejs/express-app-vs-server"},{"type":"link","label":"How Garbage collection works in NodeJS?","href":"/questions/nodejs/garbage-collection","docId":"questions/nodejs/garbage-collection"},{"type":"link","label":"how-to-large-files","href":"/questions/nodejs/how-to-large-files","docId":"questions/nodejs/how-to-large-files"},{"type":"link","label":"What is libuv?","href":"/questions/nodejs/libuv","docId":"questions/nodejs/libuv"},{"type":"link","label":"What is load balancer?","href":"/questions/nodejs/load-balancer","docId":"questions/nodejs/load-balancer"},{"type":"link","label":"What are the types of memory leaks in NodeJS?","href":"/questions/nodejs/memory-leaks","docId":"questions/nodejs/memory-leaks"},{"type":"link","label":"How microservices communicate with each other?","href":"/questions/nodejs/microservices-communication","docId":"questions/nodejs/microservices-communication"},{"type":"link","label":"What is `NODE_ENV`?","href":"/questions/nodejs/node-env","docId":"questions/nodejs/node-env"},{"type":"link","label":"How to debug a NodeJS app?","href":"/questions/nodejs/nodejs-app-debug","docId":"questions/nodejs/nodejs-app-debug"},{"type":"link","label":"How to measure the performance of an NodeJS app?","href":"/questions/nodejs/nodejs-app-perfomance","docId":"questions/nodejs/nodejs-app-perfomance"},{"type":"link","label":"What is a Buffer in NodeJS?","href":"/questions/nodejs/nodejs-buffer","docId":"questions/nodejs/nodejs-buffer"},{"type":"link","label":"Why/How to create a nodejs cluster?","href":"/questions/nodejs/nodejs-clustering","docId":"questions/nodejs/nodejs-clustering"},{"type":"link","label":"How do you handle errors in a NodeJS application?","href":"/questions/nodejs/nodejs-error-handling","docId":"questions/nodejs/nodejs-error-handling"},{"type":"link","label":"What is an Event Loop?","href":"/questions/nodejs/nodejs-event-loop","docId":"questions/nodejs/nodejs-event-loop"},{"type":"link","label":"What are the key features of NodeJS?","href":"/questions/nodejs/nodejs-features","docId":"questions/nodejs/nodejs-features"},{"type":"link","label":"What is JWT?","href":"/questions/nodejs/nodejs-jwt","docId":"questions/nodejs/nodejs-jwt"},{"type":"link","label":"What is a middleware in NodeJS?","href":"/questions/nodejs/nodejs-middleware","docId":"questions/nodejs/nodejs-middleware"},{"type":"link","label":"How do you structure a NodeJS project?","href":"/questions/nodejs/nodejs-project-structure","docId":"questions/nodejs/nodejs-project-structure"},{"type":"link","label":"What is Reactor Pattern?","href":"/questions/nodejs/nodejs-reactor-pattern","docId":"questions/nodejs/nodejs-reactor-pattern"},{"type":"link","label":"How does routing work in NodeJS?","href":"/questions/nodejs/nodejs-routing","docId":"questions/nodejs/nodejs-routing"},{"type":"link","label":"What is a Stream in NodeJS?","href":"/questions/nodejs/nodejs-stream","docId":"questions/nodejs/nodejs-stream"},{"type":"link","label":"Explain the concept of stub in NodeJS","href":"/questions/nodejs/nodejs-stub","docId":"questions/nodejs/nodejs-stub"},{"type":"link","label":"List down the various timing features of NodeJS","href":"/questions/nodejs/nodejs-time","docId":"questions/nodejs/nodejs-time"},{"type":"link","label":"What is the package.json?","href":"/questions/nodejs/package-json","docId":"questions/nodejs/package-json"},{"type":"link","label":"What is the role of the package-lock.json?","href":"/questions/nodejs/package-lock-json","docId":"questions/nodejs/package-lock-json"},{"type":"link","label":"What is the diff between process vs threads in NodeJS?","href":"/questions/nodejs/process-vs-thread","docId":"questions/nodejs/process-vs-thread"},{"type":"link","label":"What is the diff between put vs patch?","href":"/questions/nodejs/put-vs-patch","docId":"questions/nodejs/put-vs-patch"},{"type":"link","label":"Explain\xa0REPL in the context of NodeJS","href":"/questions/nodejs/repl","docId":"questions/nodejs/repl"},{"type":"link","label":"What is the diff between spawn and fork methods?","href":"/questions/nodejs/spawn-vs-fork","docId":"questions/nodejs/spawn-vs-fork"},{"type":"link","label":"What are tilde(~) and caret(^) in package.json?","href":"/questions/nodejs/tilde-and-carret-packge-json","docId":"questions/nodejs/tilde-and-carret-packge-json"},{"type":"link","label":"What is NodeJS?","href":"/questions/nodejs/what-is-nodejs","docId":"questions/nodejs/what-is-nodejs"}],"href":"/questions/nodejs/"},{"type":"category","label":"Common","collapsible":true,"collapsed":true,"className":"hide-questions","items":[{"type":"link","label":"What is Asynchronous execution?","href":"/questions/common/asynchronous-execution","docId":"questions/common/asynchronous-execution"},{"type":"link","label":"What is code refactoring?","href":"/questions/common/code-refactoring","docId":"questions/common/code-refactoring"},{"type":"link","label":"What is Concurrency execution?","href":"/questions/common/concurrency","docId":"questions/common/concurrency"},{"type":"link","label":"Dependency Inversion Principle","href":"/questions/common/dependency-inversion-principle","docId":"questions/common/dependency-inversion-principle"},{"type":"link","label":"What is Encapsulation?","href":"/questions/common/encapsulation","docId":"questions/common/encapsulation"},{"type":"link","label":"What is Inheritance?","href":"/questions/common/inheritance","docId":"questions/common/inheritance"},{"type":"link","label":"Interface Segregation Principle","href":"/questions/common/interface-segregation-principle","docId":"questions/common/interface-segregation-principle"},{"type":"link","label":"Liskov Substitution Principle","href":"/questions/common/liskov-substitution-principle","docId":"questions/common/liskov-substitution-principle"},{"type":"link","label":"What is Microservice architecture?","href":"/questions/common/microservice-architecture","docId":"questions/common/microservice-architecture"},{"type":"link","label":"What is monolithic architecture?","href":"/questions/common/monolithic-architecture","docId":"questions/common/monolithic-architecture"},{"type":"link","label":"What is Multi-threaded execution?","href":"/questions/common/multi-threaded-execution","docId":"questions/common/multi-threaded-execution"},{"type":"link","label":"What is OOP?","href":"/questions/common/oop","docId":"questions/common/oop"},{"type":"link","label":"Open-Closed Principle","href":"/questions/common/open-closed-principle","docId":"questions/common/open-closed-principle"},{"type":"link","label":"What is Parallel execution?","href":"/questions/common/parallel-execution","docId":"questions/common/parallel-execution"},{"type":"link","label":"What is Polymorphism?","href":"/questions/common/polymorphism","docId":"questions/common/polymorphism"},{"type":"link","label":"Single Responsibility Principle","href":"/questions/common/single-responsibility-principle","docId":"questions/common/single-responsibility-principle"},{"type":"link","label":"What is SOLID?","href":"/questions/common/solid","docId":"questions/common/solid"},{"type":"link","label":"SPA vs MPA","href":"/questions/common/spa-vs-mpa","docId":"questions/common/spa-vs-mpa"},{"type":"link","label":"What are the ways to parallelize calculations?","href":"/questions/common/ways-parallelize-calculations","docId":"questions/common/ways-parallelize-calculations"},{"type":"link","label":"What is CORS?","href":"/questions/common/what-is-cors","docId":"questions/common/what-is-cors"},{"type":"link","label":"What is Memoization?","href":"/questions/common/what-is-memoization","docId":"questions/common/what-is-memoization"}],"href":"/questions/common/"}],"href":"/category/questions"},{"type":"category","label":"Algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Data Structures","href":"/algorithms/data-structures","docId":"algorithms/data-structures"},{"type":"link","label":"Complexity and Big O","href":"/algorithms/big-o-complexity","docId":"algorithms/big-o-complexity"},{"type":"category","label":"Easy Tasks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Add Strings","href":"/algorithms/easy/add-strings","docId":"algorithms/easy/add-strings"},{"type":"link","label":"Buy and Sell Stocks 1","href":"/algorithms/easy/best-time-to-buy-and-sell-stock-1","docId":"algorithms/easy/best-time-to-buy-and-sell-stock-1"},{"type":"link","label":"Buy and Sell Stocks 2","href":"/algorithms/easy/best-time-to-buy-and-sell-stock-2","docId":"algorithms/easy/best-time-to-buy-and-sell-stock-2"},{"type":"link","label":"Binary Sum","href":"/algorithms/easy/binary-sum","docId":"algorithms/easy/binary-sum"},{"type":"link","label":"Binary Watch","href":"/algorithms/easy/binary-watch","docId":"algorithms/easy/binary-watch"},{"type":"link","label":"Climbing Stairs","href":"/algorithms/easy/climbing-stairs","docId":"algorithms/easy/climbing-stairs"},{"type":"link","label":"The closest number in an array","href":"/algorithms/easy/closest-number","docId":"algorithms/easy/closest-number"},{"type":"link","label":"Collapse Digits","href":"/algorithms/easy/collapse-digits","docId":"algorithms/easy/collapse-digits"},{"type":"link","label":"Excel Sheet Column Number","href":"/algorithms/easy/excel-sheet-column-number","docId":"algorithms/easy/excel-sheet-column-number"}],"href":"/category/easy-tasks"},{"type":"category","label":"Medium Tasks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Add One Row to Tree","href":"/algorithms/medium/add-one-row-to-tree","docId":"algorithms/medium/add-one-row-to-tree"},{"type":"link","label":"Add Two Numbers","href":"/algorithms/medium/add-two-numbers","docId":"algorithms/medium/add-two-numbers"},{"type":"link","label":"Binary Tree Inorder Traversal","href":"/algorithms/medium/binary-tree-inorder-traversal","docId":"algorithms/medium/binary-tree-inorder-traversal"},{"type":"link","label":"Binary Tree Level Order Traversal","href":"/algorithms/medium/binary-tree-level-order-traversal","docId":"algorithms/medium/binary-tree-level-order-traversal"},{"type":"link","label":"Binary Tree Preorder Traversal","href":"/algorithms/medium/binary-tree-preorder-traversal","docId":"algorithms/medium/binary-tree-preorder-traversal"},{"type":"link","label":"Sum of the 3 Closest","href":"/algorithms/medium/sum-3-closest","docId":"algorithms/medium/sum-3-closest"},{"type":"link","label":"Sum of the 3 Zero","href":"/algorithms/medium/sum-3","docId":"algorithms/medium/sum-3"},{"type":"link","label":"Sum of the 4","href":"/algorithms/medium/sum-4-1","docId":"algorithms/medium/sum-4-1"},{"type":"link","label":"Sum of the 4 (2)","href":"/algorithms/medium/sum-4-2","docId":"algorithms/medium/sum-4-2"}],"href":"/category/medium-tasks"},{"type":"category","label":"Hard Tasks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Buy and Sell Stock 3","href":"/algorithms/hard/best-time-to-buy-and-sell-stock-iii","docId":"algorithms/hard/best-time-to-buy-and-sell-stock-iii"},{"type":"link","label":"Binary Tree Maximum Path Sum","href":"/algorithms/hard/binary-tree-maximum-path-sum","docId":"algorithms/hard/binary-tree-maximum-path-sum"},{"type":"link","label":"Binary Tree Postorder Traversal","href":"/algorithms/hard/binary-tree-postorder-traversal","docId":"algorithms/hard/binary-tree-postorder-traversal"},{"type":"link","label":"Candy","href":"/algorithms/hard/candy","docId":"algorithms/hard/candy"},{"type":"link","label":"Distinct Subsequences","href":"/algorithms/hard/distinct-subsequences","docId":"algorithms/hard/distinct-subsequences"},{"type":"link","label":"Dungeon Game","href":"/algorithms/hard/dungeon-game","docId":"algorithms/hard/dungeon-game"},{"type":"link","label":"Edit Distance","href":"/algorithms/hard/edit-distance","docId":"algorithms/hard/edit-distance"},{"type":"link","label":"Find Minimum in Rotated Sorted Array II","href":"/algorithms/hard/find-minimum-in-rotated-sorted-array-ii","docId":"algorithms/hard/find-minimum-in-rotated-sorted-array-ii"},{"type":"link","label":"First Missing Positive","href":"/algorithms/hard/first-missing-positive","docId":"algorithms/hard/first-missing-positive"},{"type":"link","label":"Insert Interval","href":"/algorithms/hard/insert-interval","docId":"algorithms/hard/insert-interval"}],"href":"/category/hard-tasks"}],"href":"/algorithms"}]},"docs":{"algorithms/big-o-complexity":{"id":"algorithms/big-o-complexity","title":"Complexity and Big O","description":"Complexity is a way to measure the performance of an algorithm in terms of the amount of resources (such as time or space) it consumes. There are two main types of complexities: Time_** complexity and Space_ complexity.","sidebar":"tutorialSidebar"},"algorithms/data-structures":{"id":"algorithms/data-structures","title":"Data Structures","description":"This topic is in progress","sidebar":"tutorialSidebar"},"algorithms/easy/add-strings":{"id":"algorithms/easy/add-strings","title":"Add Strings","description":"Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.","sidebar":"tutorialSidebar"},"algorithms/easy/best-time-to-buy-and-sell-stock-1":{"id":"algorithms/easy/best-time-to-buy-and-sell-stock-1","title":"Buy and Sell Stocks 1","description":"Say you have an array for which the i-th element is the price of a given stock on day i.","sidebar":"tutorialSidebar"},"algorithms/easy/best-time-to-buy-and-sell-stock-2":{"id":"algorithms/easy/best-time-to-buy-and-sell-stock-2","title":"Buy and Sell Stocks 2","description":"Say you have an array for which the i-th element is the price of a given stock on day i.","sidebar":"tutorialSidebar"},"algorithms/easy/binary-sum":{"id":"algorithms/easy/binary-sum","title":"Binary Sum","description":"Given two binary strings, return their sum (also a binary string).","sidebar":"tutorialSidebar"},"algorithms/easy/binary-watch":{"id":"algorithms/easy/binary-watch","title":"Binary Watch","description":"A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).","sidebar":"tutorialSidebar"},"algorithms/easy/climbing-stairs":{"id":"algorithms/easy/climbing-stairs","title":"Climbing Stairs","description":"You are climbing a stair case. It takes n steps to reach to the top.","sidebar":"tutorialSidebar"},"algorithms/easy/closest-number":{"id":"algorithms/easy/closest-number","title":"The closest number in an array","description":"Find the closest number in an array of numbers","sidebar":"tutorialSidebar"},"algorithms/easy/collapse-digits":{"id":"algorithms/easy/collapse-digits","title":"Collapse Digits","description":"Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.","sidebar":"tutorialSidebar"},"algorithms/easy/excel-sheet-column-number":{"id":"algorithms/easy/excel-sheet-column-number","title":"Excel Sheet Column Number","description":"Given a column title as appear in an Excel sheet, return its corresponding column number.","sidebar":"tutorialSidebar"},"algorithms/hard/best-time-to-buy-and-sell-stock-iii":{"id":"algorithms/hard/best-time-to-buy-and-sell-stock-iii","title":"Buy and Sell Stock 3","description":"Say you have an array for which the ith element is the price of a given stock on day i.","sidebar":"tutorialSidebar"},"algorithms/hard/binary-tree-maximum-path-sum":{"id":"algorithms/hard/binary-tree-maximum-path-sum","title":"Binary Tree Maximum Path Sum","description":"Given a non-empty binary tree, find the maximum path sum.","sidebar":"tutorialSidebar"},"algorithms/hard/binary-tree-postorder-traversal":{"id":"algorithms/hard/binary-tree-postorder-traversal","title":"Binary Tree Postorder Traversal","description":"Given a binary tree, return the postorder traversal of its nodes\' values.","sidebar":"tutorialSidebar"},"algorithms/hard/candy":{"id":"algorithms/hard/candy","title":"Candy","description":"There are N children standing in a line. Each child is assigned a rating value.","sidebar":"tutorialSidebar"},"algorithms/hard/distinct-subsequences":{"id":"algorithms/hard/distinct-subsequences","title":"Distinct Subsequences","description":"Given a string S and a string T, count the number of distinct subsequences of S which equals T.","sidebar":"tutorialSidebar"},"algorithms/hard/dungeon-game":{"id":"algorithms/hard/dungeon-game","title":"Dungeon Game","description":"The demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.","sidebar":"tutorialSidebar"},"algorithms/hard/edit-distance":{"id":"algorithms/hard/edit-distance","title":"Edit Distance","description":"Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.","sidebar":"tutorialSidebar"},"algorithms/hard/find-minimum-in-rotated-sorted-array-ii":{"id":"algorithms/hard/find-minimum-in-rotated-sorted-array-ii","title":"Find Minimum in Rotated Sorted Array II","description":"Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.","sidebar":"tutorialSidebar"},"algorithms/hard/first-missing-positive":{"id":"algorithms/hard/first-missing-positive","title":"First Missing Positive","description":"Given an unsorted integer array, find the smallest missing\xa0positive integer.","sidebar":"tutorialSidebar"},"algorithms/hard/insert-interval":{"id":"algorithms/hard/insert-interval","title":"Insert Interval","description":"Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).","sidebar":"tutorialSidebar"},"algorithms/index":{"id":"algorithms/index","title":"Algorithms","description":"An algorithm is a step-by-step procedure for solving a problem. It is a set of instructions or rules that can be followed to accomplish a specific task.","sidebar":"tutorialSidebar"},"algorithms/medium/add-one-row-to-tree":{"id":"algorithms/medium/add-one-row-to-tree","title":"Add One Row to Tree","description":"Given the root of a binary tree, then value v and depth d, you need to add a row of nodes with value v at the given depth d. The root node is at depth 1.","sidebar":"tutorialSidebar"},"algorithms/medium/add-two-numbers":{"id":"algorithms/medium/add-two-numbers","title":"Add Two Numbers","description":"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.","sidebar":"tutorialSidebar"},"algorithms/medium/binary-tree-inorder-traversal":{"id":"algorithms/medium/binary-tree-inorder-traversal","title":"Binary Tree Inorder Traversal","description":"Given a binary tree, return the inorder traversal of its nodes\' values.","sidebar":"tutorialSidebar"},"algorithms/medium/binary-tree-level-order-traversal":{"id":"algorithms/medium/binary-tree-level-order-traversal","title":"Binary Tree Level Order Traversal","description":"Given a binary tree, return the level order traversal of its nodes\' values. (ie, from left to right, level by level).","sidebar":"tutorialSidebar"},"algorithms/medium/binary-tree-preorder-traversal":{"id":"algorithms/medium/binary-tree-preorder-traversal","title":"Binary Tree Preorder Traversal","description":"Given a binary tree, return the preorder traversal of its nodes\' values.","sidebar":"tutorialSidebar"},"algorithms/medium/sum-3":{"id":"algorithms/medium/sum-3","title":"Sum of the 3 Zero","description":"Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.","sidebar":"tutorialSidebar"},"algorithms/medium/sum-3-closest":{"id":"algorithms/medium/sum-3-closest","title":"Sum of the 3 Closest","description":"Given an array nums of n integers and an integer target, find three integers in nums\xa0such that the sum is closest to\xa0target. Return the sum of the three integers. You may assume that each input would have exactly one solution.","sidebar":"tutorialSidebar"},"algorithms/medium/sum-4-1":{"id":"algorithms/medium/sum-4-1","title":"Sum of the 4","description":"Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.","sidebar":"tutorialSidebar"},"algorithms/medium/sum-4-2":{"id":"algorithms/medium/sum-4-2","title":"Sum of the 4 (2)","description":"Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.","sidebar":"tutorialSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started","description":"The main goal of this guide is to get the best job offer you can.","sidebar":"tutorialSidebar"},"questions/common/asynchronous-execution":{"id":"questions/common/asynchronous-execution","title":"What is Asynchronous execution?","description":"Asynchrony implies that an operation can be performed by someone on the side: a remote Web site, a server, or another device outside the current computing device.","sidebar":"tutorialSidebar"},"questions/common/code-refactoring":{"id":"questions/common/code-refactoring","title":"What is code refactoring?","description":"IN PROGRESS","sidebar":"tutorialSidebar"},"questions/common/concurrency":{"id":"questions/common/concurrency","title":"What is Concurrency execution?","description":"It is the most general term, which does not say how this concurrency will be obtained - just more than one task will be solved in a certain period of time.","sidebar":"tutorialSidebar"},"questions/common/dependency-inversion-principle":{"id":"questions/common/dependency-inversion-principle","title":"Dependency Inversion Principle","description":"- Top-level modules should not depend on lower-level modules. Both types of modules should depend on abstractions.","sidebar":"tutorialSidebar"},"questions/common/encapsulation":{"id":"questions/common/encapsulation","title":"What is Encapsulation?","description":"Keeping an object\'s internal state private, and in general making a clear division between its public interface and its private internal state, is called encapsulation. The object\'s internal state is kept private, meaning that it can only be accessed by the object\'s own methods, not from other objects.","sidebar":"tutorialSidebar"},"questions/common/index":{"id":"questions/common/index","title":"Common Programming Questions","description":"Misc","sidebar":"tutorialSidebar"},"questions/common/inheritance":{"id":"questions/common/inheritance","title":"What is Inheritance?","description":"Inheritance is a fundamental concept in object-oriented programming (OOP) that refers to the ability of a class to inherit properties and methods from another class. It allows developers to create a new class (the \\"subclass\\") that is based on an existing class (the \\"superclass\\"), and to extend or modify the behavior of the subclass as needed.","sidebar":"tutorialSidebar"},"questions/common/interface-segregation-principle":{"id":"questions/common/interface-segregation-principle","title":"Interface Segregation Principle","description":"Create highly specialized interfaces designed for a specific client. Customers should not be dependent on interfaces that they do not use.","sidebar":"tutorialSidebar"},"questions/common/liskov-substitution-principle":{"id":"questions/common/liskov-substitution-principle","title":"Liskov Substitution Principle","description":"If you have a function, that works for a base type, it should work for a derived type.","sidebar":"tutorialSidebar"},"questions/common/microservice-architecture":{"id":"questions/common/microservice-architecture","title":"What is Microservice architecture?","description":"A microservice architecture means that your app is made up of lots of smaller, independent applications capable of running in their own memory space and scaling independently from each other across potentially many separate machines.","sidebar":"tutorialSidebar"},"questions/common/monolithic-architecture":{"id":"questions/common/monolithic-architecture","title":"What is monolithic architecture?","description":"A monolithic architecture means that your app is written as one cohesive unit of code whose components are designed to work together, sharing the same memory space and resources.","sidebar":"tutorialSidebar"},"questions/common/multi-threaded-execution":{"id":"questions/common/multi-threaded-execution","title":"What is Multi-threaded execution?","description":"Multithreading is one way to implement competitive execution by abstracting a \\"worker thread\\". Threads \\"abstract\\" low-level details from the user and allow more than one job to run \\"in parallel\\".","sidebar":"tutorialSidebar"},"questions/common/oop":{"id":"questions/common/oop","title":"What is OOP?","description":"Object-oriented programming (OOP) is a programming paradigm that is based on the concept of \\"objects\\", which are data structures that contain data and behavior. In OOP, the focus is on creating objects that represent real-world entities and the relationships between them, rather than on writing code to perform specific tasks.","sidebar":"tutorialSidebar"},"questions/common/open-closed-principle":{"id":"questions/common/open-closed-principle","title":"Open-Closed Principle","description":"Program entities (classes, modules, functions) must be open for extension, but not for modification.","sidebar":"tutorialSidebar"},"questions/common/parallel-execution":{"id":"questions/common/parallel-execution","title":"What is Parallel execution?","description":"Parallel execution (parallel computing) implies having more than one computing device (e.g., a processor) that will perform multiple tasks simultaneously.","sidebar":"tutorialSidebar"},"questions/common/polymorphism":{"id":"questions/common/polymorphism","title":"What is Polymorphism?","description":"Polymorphism is a fundamental concept in object-oriented programming (OOP) that refers to the ability of different objects to respond to the same method or property in different ways. In JavaScript, polymorphism can be achieved through a variety of techniques, including inheritance, method overriding, and function overloading.","sidebar":"tutorialSidebar"},"questions/common/single-responsibility-principle":{"id":"questions/common/single-responsibility-principle","title":"Single Responsibility Principle","description":"A class should be responsible for only one thing. If a class is responsible for several tasks, its subsystems, which implement these tasks, are related to each other. Changes in one such subsystem lead to changes in another.","sidebar":"tutorialSidebar"},"questions/common/solid":{"id":"questions/common/solid","title":"What is SOLID?","description":"SOLID is a set of five principles of object-oriented software design. These principles were first proposed by Robert C. Martin in the early 2000s and have since become a widely accepted set of best practices for designing maintainable, scalable, and flexible software systems.","sidebar":"tutorialSidebar"},"questions/common/spa-vs-mpa":{"id":"questions/common/spa-vs-mpa","title":"SPA vs MPA","description":"Single Page Applications (SPAs) and Multiple Page Applications (MPAs) are two different architectures for building web applications.","sidebar":"tutorialSidebar"},"questions/common/ways-parallelize-calculations":{"id":"questions/common/ways-parallelize-calculations","title":"What are the ways to parallelize calculations?","description":"There are several ways to parallelize calculations in JavaScript, depending on the specific requirements of the task at hand. Some of the most common approaches include:","sidebar":"tutorialSidebar"},"questions/common/what-is-cors":{"id":"questions/common/what-is-cors","title":"What is CORS?","description":"CORS (Cross-Origin Resource Sharing) is a security mechanism that is used to restrict or allow the communication between web pages and servers that are hosted on different domains. It consists of a set of rules and headers that are used to specify the conditions under which a web page is allowed to make requests to a server, and to allow or deny the responses of the server to be accessed by the web page.","sidebar":"tutorialSidebar"},"questions/common/what-is-memoization":{"id":"questions/common/what-is-memoization","title":"What is Memoization?","description":"Memoization is an optimization technique which passes a complex function to be memoized. In memoization, the result is \u201cremembered\u201d when the same parameters are passed-in subsequently.","sidebar":"tutorialSidebar"},"questions/frontend/alt-attribute":{"id":"questions/frontend/alt-attribute","title":"What is the purpose of the\xa0`alt`\xa0attribute on images?","description":"The\xa0alt\xa0attribute provides alternative information for an image if a user cannot view it. The\xa0alt\xa0attribute should be used to describe any images except those which only serve a decorative purpose, in which case it should be left empty.","sidebar":"tutorialSidebar"},"questions/frontend/apply-css-html-document":{"id":"questions/frontend/apply-css-html-document","title":"What are the different ways to apply CSS to an HTML document?","description":"The different ways to apply CSS to an HTML document are:","sidebar":"tutorialSidebar"},"questions/frontend/browser-cache":{"id":"questions/frontend/browser-cache","title":"What is the purpose of cache?","description":"Browsers have a cache to temporarily store files on websites so they don\'t need to be re-downloaded again when switching between pages or reloading the same page. The server is set up to send headers that tell the browser to store the file for a given amount of time. This greatly increases website speed and preserves bandwidth.","sidebar":"tutorialSidebar"},"questions/frontend/browser-event-loop":{"id":"questions/frontend/browser-event-loop","title":"What is an Event Loop?","description":"In JavaScript, the event loop is a mechanism that is used to execute code asynchronously. It is a loop that continuously checks for and processes events that are added to the event queue.","sidebar":"tutorialSidebar"},"questions/frontend/browser-microtasks":{"id":"questions/frontend/browser-microtasks","title":"When to use Microtasks?","description":"It\'s important to note again that most developers won\'t use microtasks much, if at all. They\'re a highly specialized feature of modern browser-based JavaScript development, allowing you to schedule code to jump in front of other things in the long set of things waiting to happen on the user\'s computer. Abusing this capability will lead to performance problems.","sidebar":"tutorialSidebar"},"questions/frontend/browser-rendering-engine":{"id":"questions/frontend/browser-rendering-engine","title":"How does the browser rendering engine work?","description":"In order to render content the browser has to go through a series of steps:","sidebar":"tutorialSidebar"},"questions/frontend/css":{"id":"questions/frontend/css","title":"What is CSS?","description":"CSS (Cascading Style Sheets) is a style sheet language that is used to describe the look and the formatting of a HTML document. CSS is used to control the layout, the colors, the fonts, the spacing, and the transitions of the elements in a web page or an application.","sidebar":"tutorialSidebar"},"questions/frontend/css-at-rule":{"id":"questions/frontend/css-at-rule","title":"What is At-Rule `@`?","description":"At-rules are\xa0CSS statements\xa0that instructs CSS how to behave. They begin with an at sign,\xa0@\xa0followed by an identifier and includes everything up to the next semicolon,\xa0;\xa0or the next CSS block, whichever comes first.","sidebar":"tutorialSidebar"},"questions/frontend/css-box-model":{"id":"questions/frontend/css-box-model","title":"Explain the CSS \\"box model\\"","description":"The CSS box model is a rectangular layout paradigm for HTML elements that consists of the following:","sidebar":"tutorialSidebar"},"questions/frontend/css-engine":{"id":"questions/frontend/css-engine","title":"How does CSS work under the hood?","description":"The CSS language is designed to be used alongside a \\"markup\\" language like HTML. CSS defines how HTML elements are formatted \u2013 controlling their layout, colors, fonts, and so on. When a browser displays a document, it must combine the document\'s content with its style information. It processes the document in a number of stages, which we\'ve listed below.","sidebar":"tutorialSidebar"},"questions/frontend/css-grid-vs-flexbox":{"id":"questions/frontend/css-grid-vs-flexbox","title":"When to use css grid and flexbox?","description":"-   CSS Grid Layout is a\xa0two-dimensional\xa0system, meaning it can handle both columns and rows, unlike flexbox which is largely a\xa0one-dimensional\xa0system (either in a column or a row).","sidebar":"tutorialSidebar"},"questions/frontend/css-position":{"id":"questions/frontend/css-position","title":"Explain CSS position property?","description":"-   absolute, place an element exactly where you want to place it. absolute position is actually set relative to the element\'s parent. if no parent available then relatively place to the page itself (it will default all the way back up to the element).","sidebar":"tutorialSidebar"},"questions/frontend/css-preprocessor":{"id":"questions/frontend/css-preprocessor","title":"What is CSS preprocessor?","description":"Pre-processors extend CSS with variables, operators, interpolations, functions, mixins and many more other usable assets. After development, these specific files are compiled into regular CSS that any browser can understand. Pre-processor help writing reusable, easily maintainable and extensible codes in CSS.","sidebar":"tutorialSidebar"},"questions/frontend/css-selectors":{"id":"questions/frontend/css-selectors","title":"What are the CSS selectors?","description":"A CSS selector is the part of a CSS rule set that actually selects the content you want to style.","sidebar":"tutorialSidebar"},"questions/frontend/css-units":{"id":"questions/frontend/css-units","title":"What are the different types of CSS units, and how do they work?","description":"The different types of CSS units are:","sidebar":"tutorialSidebar"},"questions/frontend/css-vs-js-animations":{"id":"questions/frontend/css-vs-js-animations","title":"Explain the pros and cons for CSS animations vs JS animations?","description":"Regarding optimization and responsiveness the debate bounces back and forth but, the concept is:","sidebar":"tutorialSidebar"},"questions/frontend/dom":{"id":"questions/frontend/dom","title":"What is DOM?","description":"The DOM (Document Object Model) is a representation of the structure and the content of a web page, as an object tree. It consists of a set of objects and properties that represent the elements, the attributes, and the content of a web page, and it is used to manipulate and access the content and the structure of a web page.","sidebar":"tutorialSidebar"},"questions/frontend/dom-attributes-properties":{"id":"questions/frontend/dom-attributes-properties","title":"What is the difference between attributes and properties?","description":"In JavaScript, attributes and properties are both used to store data in an object or an element, but they have some important differences.","sidebar":"tutorialSidebar"},"questions/frontend/enctype-attribute":{"id":"questions/frontend/enctype-attribute","title":"What does\xa0`enctype` attribute\xa0mean?","description":"The enctype attribute specifies how the form-data should be encoded when submitting it to the server.","sidebar":"tutorialSidebar"},"questions/frontend/event-bubbling":{"id":"questions/frontend/event-bubbling","title":"What is Event Bubbling?","description":"Event bubbling is a type of event propagation that occurs during the bubbling phase. When an event is triggered on an element, it is propagated up to its parent elements, until it reaches the top of the document. Event bubbling allows you to handle events on multiple elements that are nested inside each other.","sidebar":"tutorialSidebar"},"questions/frontend/event-capturing":{"id":"questions/frontend/event-capturing","title":"What is Event Capturing?","description":"Event capturing is a type of event propagation that occurs during the capturing phase. When an event is triggered on an element, it is propagated down to its child elements, until it reaches the element that triggered the event. Event capturing allows you to handle events on multiple elements that are nested inside each other.","sidebar":"tutorialSidebar"},"questions/frontend/event-propagation":{"id":"questions/frontend/event-propagation","title":"What is Event Propagation?","description":"Event propagation refers to the way that events are processed in an HTML document. When an event is triggered on an element, it can be processed in two ways:","sidebar":"tutorialSidebar"},"questions/frontend/html":{"id":"questions/frontend/html","title":"What is HTML?","description":"HTML (HyperText Markup Language) is a markup language used to structure and format the content of web pages. It consists of a set of tags and attributes that define the structure and the formatting of the content, and it is used to create the layout and the appearance of web pages.","sidebar":"tutorialSidebar"},"questions/frontend/html-aria":{"id":"questions/frontend/html-aria","title":"What ARIA and screenreaders are?","description":"Screen readers are software programs that provide assistive technologies that allow people with disabilities (such as no sight, sound or mouse-ing ability) to use web applications. You can make your sites more accessible by following ARIA standards such as semantic HTML, alt attributes and using [role=button] in the expected ways","sidebar":"tutorialSidebar"},"questions/frontend/html-iframe":{"id":"questions/frontend/html-iframe","title":"What is an iframe and how it works?","description":"The\xa0``\xa0HTML element represents a nested browsing context, embedding another HTML page into the current one. Each embedded browsing context has its own\xa0session history\xa0and\xa0document. The browsing context that embeds the others is called the parent browsing context. The topmost browsing context \u2014 the one with no parent \u2014 is usually the browser window, represented by the\xa0Window\xa0object.","sidebar":"tutorialSidebar"},"questions/frontend/image-replacement":{"id":"questions/frontend/image-replacement","title":"What image replacement techniques you know, and which do you use?","description":"Technique","sidebar":"tutorialSidebar"},"questions/frontend/index":{"id":"questions/frontend/index","title":"Frontend Questions","description":"DOM","sidebar":"tutorialSidebar"},"questions/frontend/meta-tags":{"id":"questions/frontend/meta-tags","title":"What is the purpose of meta tags?","description":"The META elements can be used to include name-value or property-value pairs describing properties of the HTML document, such as title, description, image etc. Meta tags often used for Open Graph Metadata","sidebar":"tutorialSidebar"},"questions/frontend/mobile-vs-desktop-first-approach":{"id":"questions/frontend/mobile-vs-desktop-first-approach","title":"What is desktop first and mobile first design approach?","description":"-   Desktop first : General selectors and styles designed to make the site look good on DESKTOP screens defined globally. But they affect all devices, and must be overridden by max-width media queries targeting minimum screen size","sidebar":"tutorialSidebar"},"questions/frontend/padding-vs-margin":{"id":"questions/frontend/padding-vs-margin","title":"What is the difference between \\"padding\\" and \\"margin\\" in CSS?","description":"-   The \\"padding\\" and \\"margin\\" properties are used to control the space around the elements in an HTML document.","sidebar":"tutorialSidebar"},"questions/frontend/progressive-rendering":{"id":"questions/frontend/progressive-rendering","title":"What is progressive rendering?","description":"Progressive rendering is the name given to techniques used to improve the performance of a webpage (in particular, improve perceived load time) to render content for display as quickly as possible.","sidebar":"tutorialSidebar"},"questions/frontend/pseudo-class-vs-element":{"id":"questions/frontend/pseudo-class-vs-element","title":"What is the difference between pseudo-class and pseudo-element?","description":"A pseudo-class is a selector that assists in the selection of something that cannot be expressed by a simple selector, for example:after.","sidebar":"tutorialSidebar"},"questions/frontend/rel-nofollow-noreferrer-noopener":{"id":"questions/frontend/rel-nofollow-noreferrer-noopener","title":"Explain the use of `rel=\\"nofollow\\"`, `rel=\\"noreferrer\\"`, `rel=\\"noopener\\"` attributes?","description":"rel=\\"nofollow\\"","sidebar":"tutorialSidebar"},"questions/frontend/reset-vs-normilize":{"id":"questions/frontend/reset-vs-normilize","title":"What is the difference between \\"resetting\\" and \\"normalizing\\" CSS?","description":"1. Resetting: CSS resets aim to remove all built-in browser styling. For example margins, paddings, font-sizes of all elements are reset to be the same. You will have to redeclare styling for common typographic elements.","sidebar":"tutorialSidebar"},"questions/frontend/responsive-design":{"id":"questions/frontend/responsive-design","title":"What is the responsive design, and how do you implement it?","description":"Responsive design is a design approach that is used to create web sites and applications that are adaptable and flexible, and that work well on different devices and screen sizes. Responsive design is based on the concept of fluid grids, flexible images, and media queries.","sidebar":"tutorialSidebar"},"questions/frontend/script-async-defer":{"id":"questions/frontend/script-async-defer","title":"What does async and defer refer in a script tag?","description":"Without async or defer, the browser will run your script immediately, before rendering the elements.","sidebar":"tutorialSidebar"},"questions/frontend/spa-and-seo":{"id":"questions/frontend/spa-and-seo","title":"What is SPA and how to make it SEO-friendly?","description":"A Single Page Application (SPA) is a web application that is designed to work as a single page. It is built using client-side technologies such as HTML, CSS, and JavaScript, and it is loaded in the browser as a single HTML document. SPAs use a combination of client-side rendering, data binding, and AJAX (Asynchronous JavaScript and XML) to update the content and the layout of the page without reloading the page. SPAs are fast and responsive, and they offer a seamless and immersive experience to the users.","sidebar":"tutorialSidebar"},"questions/frontend/span-vs-div":{"id":"questions/frontend/span-vs-div","title":"What is difference between\xa0`span`\xa0tag and\xa0`div`\xa0tag?","description":"The primary difference between div and span tag is their default behavior. By default, a\xa0`\xa0is a\xa0block-level-element\xa0and a\xa0`\xa0is an\xa0inline element.","sidebar":"tutorialSidebar"},"questions/frontend/store-data-browser":{"id":"questions/frontend/store-data-browser","title":"Ways to store data in browser?","description":"1. Cookies","sidebar":"tutorialSidebar"},"questions/frontend/tasks-vs-microtasks":{"id":"questions/frontend/tasks-vs-microtasks","title":"Explain the diff Tasks vs Microtasks","description":"A\xa0task\xa0is any JavaScript code which is scheduled to be run by the standard mechanisms such as initially starting to run a program, an event callback being run, or an interval or timeout being fired. These all get scheduled on the\xa0task queue.","sidebar":"tutorialSidebar"},"questions/frontend/translate-vs-position":{"id":"questions/frontend/translate-vs-position","title":"Explain the diff `translate` vs positioning","description":"translate()\xa0is a value of CSS\xa0transform. Changing\xa0transform\xa0or\xa0opacity\xa0does not trigger browser reflow or repaint but does trigger compositions; whereas changing the absolute positioning triggers\xa0reflow.\xa0transform\xa0causes the browser to create a GPU layer for the element but changing absolute positioning properties uses the CPU. Hence\xa0translate()\xa0is more efficient and will result in shorter paint times for smoother animations.","sidebar":"tutorialSidebar"},"questions/frontend/ui-ux":{"id":"questions/frontend/ui-ux","title":"What is UI/UX?","description":"1) UI or User Interface Where the buttons are, how big the fonts are, and how menus are organized are all elements of UI.","sidebar":"tutorialSidebar"},"questions/frontend/website-perfomance":{"id":"questions/frontend/website-perfomance","title":"Ways to improve website performance","description":"-   Minimize HTTP Requests","sidebar":"tutorialSidebar"},"questions/javascript/arguments-object":{"id":"questions/javascript/arguments-object","title":"Explain  arguments object","description":"The\xa0arguments\xa0object is\xa0a local variable available within all non-arrow functions. You can refer to a function\'s arguments inside that function by using its arguments object. It has entries for each argument the function was called with, with the first entry\'s index at 0.","sidebar":"tutorialSidebar"},"questions/javascript/arrow-functions":{"id":"questions/javascript/arrow-functions","title":"What is an arrow function and its specifics?","description":"An arrow function is a shorthand syntax for defining a function in JavaScript. It was introduced in ECMAScript 6 (ES6) as a more concise way to write anonymous functions, also known as lambda functions. The have the following specifics:","sidebar":"tutorialSidebar"},"questions/javascript/async-await-keywords":{"id":"questions/javascript/async-await-keywords","title":"Explain `async` and`await` keywords","description":"The async and await keywords are a newer syntax introduced in ECMAScript 2017 that allow developers to write asynchronous code in a synchronous style. They are based on promises and make it easier to write asynchronous code that is easier to read and understand.","sidebar":"tutorialSidebar"},"questions/javascript/closure":{"id":"questions/javascript/closure","title":"What is a closure in JavaScript?","description":"In JavaScript, a closure is a function that has access to the variables and scope of its outer function, even after the outer function has returned.","sidebar":"tutorialSidebar"},"questions/javascript/common-promise-pitfalls":{"id":"questions/javascript/common-promise-pitfalls","title":"What are promise common pitfalls?","description":"There are some common pitfalls that developers can encounter when working with promises, such as forgetting to handle rejected promises or accidentally creating infinite loops with chained promises. Understanding these pitfalls can help developers write more robust and maintainable code.","sidebar":"tutorialSidebar"},"questions/javascript/comparing-two-similiar-objects":{"id":"questions/javascript/comparing-two-similiar-objects","title":"Why is the result of comparing 2 similar objects `false`?","description":"Objects in JavaScript are also known as \\"reference types\\", which means that when you assign an object to a variable, you are not creating a copy of the object, but a reference to the object. This means that multiple variables can refer to the same object in memory, and modifying the object through one variable will affect all variables that reference the same object.","sidebar":"tutorialSidebar"},"questions/javascript/debugging":{"id":"questions/javascript/debugging","title":"What tools do you use when debugging?","description":"There are a number of tools and techniques that can be used when debugging JavaScript code. Some common tools and techniques include:","sidebar":"tutorialSidebar"},"questions/javascript/diff-null-undefined-undeclared":{"id":"questions/javascript/diff-null-undefined-undeclared","title":"Explain the difference between null, undefined and undeclared","description":"null and undefined are both values that can be assigned to variables, while undeclared refers to a variable or property that has not yet been declared or defined. Additionally, null and undefined are values that can be compared and tested for equality, while undeclared is a reference error that cannot be handled or tested for.","sidebar":"tutorialSidebar"},"questions/javascript/error-handling":{"id":"questions/javascript/error-handling","title":"How do you handle errors in JavaScript?","description":"In JavaScript, there are a few ways to handle errors:","sidebar":"tutorialSidebar"},"questions/javascript/function-arguments":{"id":"questions/javascript/function-arguments","title":"What are function arguments?","description":"Function arguments are the values that are passed to a function when it is called. These values are used as inputs to the function.","sidebar":"tutorialSidebar"},"questions/javascript/function-composition":{"id":"questions/javascript/function-composition","title":"What is Function Composition?","description":"Function composition is a technique that involves combining multiple functions to create a new function.  It can help to make the code more modular, composable, and reusable.","sidebar":"tutorialSidebar"},"questions/javascript/generator-function":{"id":"questions/javascript/generator-function","title":"What is a Generator function?","description":"A generator function is a special kind of function, that can be used to create an iterator, which is an object that produces a sequence of values one at a time, on demand. Generator functions are identified by the * symbol in their definition, and they use the yield keyword to produce values.","sidebar":"tutorialSidebar"},"questions/javascript/handling-multiple-async-operations":{"id":"questions/javascript/handling-multiple-async-operations","title":"How to handle multiple asynchronous operations?","description":"There are several ways to handle multiple asynchronous operations in JavaScript:","sidebar":"tutorialSidebar"},"questions/javascript/higher-order-function":{"id":"questions/javascript/higher-order-function","title":"What is a higher-order function?","description":"A higher-order function is a function that takes one or more functions as arguments, and/or returns a function as its result. In other words, a higher-order function is a function that operates on or with other functions.","sidebar":"tutorialSidebar"},"questions/javascript/hoisting":{"id":"questions/javascript/hoisting","title":"What is hoisting in JavaScript?","description":"Hoisting is the behavior of moving declarations to the top of a script or a function before code execution.","sidebar":"tutorialSidebar"},"questions/javascript/how-to-bind-apply-call":{"id":"questions/javascript/how-to-bind-apply-call","title":"How to use bind, apply and call?","description":"These methods apply to work with different context for given function.","sidebar":"tutorialSidebar"},"questions/javascript/how-to-clone-object":{"id":"questions/javascript/how-to-clone-object","title":"How to clone an object?","description":"In JavaScript, a \\"clone\\" is a copy of an object or an array. There are two main types of cloning: shallow cloning and deep cloning.","sidebar":"tutorialSidebar"},"questions/javascript/how-to-use-new-function":{"id":"questions/javascript/how-to-use-new-function","title":"How to use `new Function()`?","description":"It is used to create a new function by passing a string containing the function\'s code as an argument:","sidebar":"tutorialSidebar"},"questions/javascript/index":{"id":"questions/javascript/index","title":"Javascript Questions","description":"Common","sidebar":"tutorialSidebar"},"questions/javascript/javascript-types":{"id":"questions/javascript/javascript-types","title":"What do Javascript types exist?","description":"In JavaScript, there are six primitive types:","sidebar":"tutorialSidebar"},"questions/javascript/map-set-objects":{"id":"questions/javascript/map-set-objects","title":"What are `Map` and `Set` objects?","description":"Map is a collection of keyed values.","sidebar":"tutorialSidebar"},"questions/javascript/mutable-vs-immutable-values":{"id":"questions/javascript/mutable-vs-immutable-values","title":"Explain Mutable and Immutable values","description":"Mutable can be changed or added to where immutable means something that cannot be changed or added.","sidebar":"tutorialSidebar"},"questions/javascript/object-prototypes":{"id":"questions/javascript/object-prototypes","title":"How do object prototypes work?","description":"Prototypes are the mechanism by which JavaScript objects inherit features from one another.","sidebar":"tutorialSidebar"},"questions/javascript/operators":{"id":"questions/javascript/operators","title":"Tell about JS Operators","description":"Most useful operators:","sidebar":"tutorialSidebar"},"questions/javascript/promise-chaining":{"id":"questions/javascript/promise-chaining","title":"What is promise chaining","description":"Promises can be chained together using the then, catch, finally methods, which allow developers to write sequential asynchronous code in a more readable and concise way.","sidebar":"tutorialSidebar"},"questions/javascript/promise-error-handling":{"id":"questions/javascript/promise-error-handling","title":"How to handle promise errors?","description":"Promises have a built-in mechanism for handling errors, known as the rejection handler. This allows developers to specify a separate callback function for handling rejected promises, rather than having to use the second argument of the then() method as a catch-all error handler.","sidebar":"tutorialSidebar"},"questions/javascript/promise-object":{"id":"questions/javascript/promise-object","title":"What is a Promise?","description":"Promises are a language feature that allows developers to write asynchronous code in a synchronous style. They provide a way to handle asynchronous operations in a way that is easier to read.","sidebar":"tutorialSidebar"},"questions/javascript/proxy-object":{"id":"questions/javascript/proxy-object","title":"What is the `Proxy` object used for?","description":"The Proxy object in JavaScript is a special kind of object that acts as an intermediary between the original object and the code that accesses or modifies it.","sidebar":"tutorialSidebar"},"questions/javascript/pure-function":{"id":"questions/javascript/pure-function","title":"What is a pure function?","description":"A\xa0pure function\xa0is a function which:","sidebar":"tutorialSidebar"},"questions/javascript/pure-global-scope":{"id":"questions/javascript/pure-global-scope","title":"Why is it better to leave the global scope \\"as is\\" and not touch it?","description":"The global scope in JavaScript is the default scope that is available to all scripts and functions, and it is represented by the global object (e.g., window in the browser).","sidebar":"tutorialSidebar"},"questions/javascript/type-converting":{"id":"questions/javascript/type-converting","title":"Explain type converting in JS","description":"In JavaScript, type conversion refers to the process of converting a value from one data type to another. There are explicit and implicit type conversions.","sidebar":"tutorialSidebar"},"questions/javascript/undefined-vs-not-defined":{"id":"questions/javascript/undefined-vs-not-defined","title":"What is the difference between undefined and is not defined?","description":"In JavaScript, undefined is a value that indicates that a variable or property has not been assigned a value.","sidebar":"tutorialSidebar"},"questions/javascript/variable-declarations":{"id":"questions/javascript/variable-declarations","title":"Explain difference var vs let vs const","description":"- var is used to declare a variable. Variables declared with var are function-scoped, which means that they are only accessible within the function in which they are declared or within the global scope if they are declared outside of any function. Variables declared with var can be reassigned and redeclared within their scope.","sidebar":"tutorialSidebar"},"questions/javascript/weakmap-weakset-objects":{"id":"questions/javascript/weakmap-weakset-objects","title":"What are `WeakMap` and `WeakSet` objects?","description":"WeakMap\xa0is\xa0Map like collection that allows only objects as keys and removes them together with associated value once they become inaccessible by other means.","sidebar":"tutorialSidebar"},"questions/javascript/what-is-ajax":{"id":"questions/javascript/what-is-ajax","title":"What do you know about AJAX?","description":"AJAX stands for \\"Asynchronous JavaScript and XML\\". It is a technique for making web pages more interactive by allowing them to request data from a server asynchronously (in the background) without needing to reload the entire page.","sidebar":"tutorialSidebar"},"questions/javascript/what-is-callback":{"id":"questions/javascript/what-is-callback","title":"What is a callback function?","description":"Callback function is a function that can be used as arguments.","sidebar":"tutorialSidebar"},"questions/javascript/what-is-function":{"id":"questions/javascript/what-is-function","title":"What is a function?","description":"A function is a block of code that can be executed when it is called. Functions are used to perform specific tasks and can be reused throughout a program, making it more organized and efficient.","sidebar":"tutorialSidebar"},"questions/javascript/what-is-javascript":{"id":"questions/javascript/what-is-javascript","title":"What is JavaScript?","description":"JavaScript is a programming language that is commonly used to create interactive elements on websites. It is a client-side language, which means that the code is executed by the user\'s web browser rather than on a server. JavaScript can be used to create a wide variety of effects and features on a website, such as drop-down menus, form validation, and interactive maps.","sidebar":"tutorialSidebar"},"questions/javascript/what-is-nan":{"id":"questions/javascript/what-is-nan","title":"What is NaN?","description":"NaN is a special value that represents \\"Not a Number\\". It is used to indicate that a value is not a valid number, usually as the result of an invalid mathematical operation.","sidebar":"tutorialSidebar"},"questions/javascript/what-is-object":{"id":"questions/javascript/what-is-object","title":"What is an object?","description":"In JavaScript, an object is a collection of key-value pairs that represent a single entity (where key is the name of a property or method). Objects are used to store and organize data, and to represent real-world entities in code.","sidebar":"tutorialSidebar"},"questions/javascript/what-is-this":{"id":"questions/javascript/what-is-this","title":"What is `this`?","description":"In JavaScript, this is a keyword that refers to the current context of a function or method. It is used to access and modify properties of the current context, and its value is determined by how a function or method is called.","sidebar":"tutorialSidebar"},"questions/javascript/why-to-use-new-keyword":{"id":"questions/javascript/why-to-use-new-keyword","title":"Why to use `new` keyword?","description":"It is used to create an instance of an object.","sidebar":"tutorialSidebar"},"questions/nodejs/async-vs-sync":{"id":"questions/nodejs/async-vs-sync","title":"What is the diff synchronous vs asynchronous code?","description":"Synchronous code is executed in a blocking manner, meaning that the program will pause at each synchronous line of code until the operation is complete.","sidebar":"tutorialSidebar"},"questions/nodejs/child-process":{"id":"questions/nodejs/child-process","title":"What is a child process in NodeJS?","description":"In Node.js, the child_process module provides an API for creating and managing child processes. Child processes are separate instances of the Node.js runtime that can be spawned from a parent process. They can be used to run long-running tasks or processes in parallel with the parent process, or to execute command-line utilities or other external programs.","sidebar":"tutorialSidebar"},"questions/nodejs/chrome-v8-engine":{"id":"questions/nodejs/chrome-v8-engine","title":"What is chrome v8 engine?","description":"V8 is a C++ based open-source JavaScript engine developed by Google. It was originally designed for Google Chrome and Chromium-based browsers ( such as Brave ) in 2008, but it was later utilized to create Node.js for server-side coding.","sidebar":"tutorialSidebar"},"questions/nodejs/daemon-process":{"id":"questions/nodejs/daemon-process","title":"What is daemon process?","description":"A daemon is a program that runs in background and has no controlling terminal. They are often used to provide background services. For example, a web-server or a database server can run as a daemon.","sidebar":"tutorialSidebar"},"questions/nodejs/event-emitter":{"id":"questions/nodejs/event-emitter","title":"What is an Event Emitter in NodeJS?","description":"The EventEmitter class is a built-in class in Node.js that allows objects to emit events and register listeners for those events. It is a useful way to implement a publish-subscribe pattern, where an object can publish events to which other objects can subscribe.","sidebar":"tutorialSidebar"},"questions/nodejs/express-app-vs-server":{"id":"questions/nodejs/express-app-vs-server","title":"Why should you separate express `app` and `server`?","description":"Keeping the API declaration separated from the network related configuration (port, protocol, etc) allows testing the API in-process, without performing network calls, with all the benefits that it brings to the table: fast testing execution and getting coverage metrics of the code. It also allows deploying the same API under flexible and different network conditions.","sidebar":"tutorialSidebar"},"questions/nodejs/garbage-collection":{"id":"questions/nodejs/garbage-collection","title":"How Garbage collection works in NodeJS?","description":"The V8 uses a scheme similar to the Java Virtual Machine and divides the memory into segments. The thing that wraps the scheme concept is known as Resident Set, which refers to the portion of memory occupied by a process that is held in the RAM.","sidebar":"tutorialSidebar"},"questions/nodejs/how-to-large-files":{"id":"questions/nodejs/how-to-large-files","title":"how-to-large-files","description":"How to handle large data in NodeJS?","sidebar":"tutorialSidebar"},"questions/nodejs/index":{"id":"questions/nodejs/index","title":"NodeJS Questions","description":"Core","sidebar":"tutorialSidebar"},"questions/nodejs/libuv":{"id":"questions/nodejs/libuv","title":"What is libuv?","description":"libuv is a cross-platform C library and the foundation of the NodeJS runtime with following features:","sidebar":"tutorialSidebar"},"questions/nodejs/load-balancer":{"id":"questions/nodejs/load-balancer","title":"What is load balancer?","description":"A load balancer is a process that takes in HTTP requests and forwards these HTTP requests to one of a collection of servers. Load balancers are usually used for performance purposes: if a server needs to do a lot of work for each request, one server might not be enough, but 2 servers alternating handling incoming requests might.","sidebar":"tutorialSidebar"},"questions/nodejs/memory-leaks":{"id":"questions/nodejs/memory-leaks","title":"What are the types of memory leaks in NodeJS?","description":"A memory leak is a condition that occurs when a program doesn\'t release the memory it allocates. For instance, the system assigns memory locations to store values for the variables that we declare inside our program.","sidebar":"tutorialSidebar"},"questions/nodejs/microservices-communication":{"id":"questions/nodejs/microservices-communication","title":"How microservices communicate with each other?","description":"Microservices are an architectural style and comprises of small modules/elements which are independent of each other. At times they are interdependent on other microservices or even a database. Breaking down applications into smaller elements brings scalability and efficiency to the structure.","sidebar":"tutorialSidebar"},"questions/nodejs/node-env":{"id":"questions/nodejs/node-env","title":"What is `NODE_ENV`?","description":"NODE_ENV is an environment variable made popular by the express web server framework. When a node application is run, it can check the value of the environment variable and do different things based on the value.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-app-debug":{"id":"questions/nodejs/nodejs-app-debug","title":"How to debug a NodeJS app?","description":"1. node-inspector:","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-app-perfomance":{"id":"questions/nodejs/nodejs-app-perfomance","title":"How to measure the performance of an NodeJS app?","description":"There are several ways to measure the performance of a Node.js app, including:","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-buffer":{"id":"questions/nodejs/nodejs-buffer","title":"What is a Buffer in NodeJS?","description":"Buffer global class is used for storing the raw data in an array of integers. But it corresponds to a raw memory allocation that is located outside the V8 heap. Buffer class is used because pure JavaScript is not compatible with binary data. So, when dealing with TCP streams or the file system, it\u2019s necessary to work with Buffers.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-clustering":{"id":"questions/nodejs/nodejs-clustering","title":"Why/How to create a nodejs cluster?","description":"Clustering in Node.js refers to the ability to create a group of child processes that can share server ports and work together to handle incoming requests. Clustering is a way to improve the performance and scalability of a Node.js application, by taking advantage of multiple CPU cores and distributing the workload across multiple processes.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-error-handling":{"id":"questions/nodejs/nodejs-error-handling","title":"How do you handle errors in a NodeJS application?","description":"An error is any problem given out by the program due to a number of factors such as logic, syntax, timeout, etc. An error in Node.js is any instance of the Error object. Common examples include built-in error classes, such as ReferenceError, RangeError, TypeError, URIError, EvalError, and SyntaxError.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-event-loop":{"id":"questions/nodejs/nodejs-event-loop","title":"What is an Event Loop?","description":"In Node.js, the event loop is the mechanism that handles the execution of JavaScript code. It is the core of the Node.js runtime and is responsible for scheduling asynchronous operations, such as I/O operations and timers.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-features":{"id":"questions/nodejs/nodejs-features","title":"What are the key features of NodeJS?","description":"-   Asynchronous and Event driven\xa0\u2013 All APIs of Node.js are asynchronous. This feature means that if a Node receives a request for some Input/Output operation, it will execute that operation in the background and continue with the processing of other requests. Thus, it will not wait for the response from the previous requests.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-jwt":{"id":"questions/nodejs/nodejs-jwt","title":"What is JWT?","description":"JSON Web Token (JWT) is an open standard that defines a compact and self-contained way of securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-middleware":{"id":"questions/nodejs/nodejs-middleware","title":"What is a middleware in NodeJS?","description":"In the context of Node.js, middleware refers to functions that have access to the request and response objects, and the next middleware function in the application\'s request-response cycle. These functions can perform tasks such as logging requests, parsing request bodies, adding response headers, and handling errors.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-project-structure":{"id":"questions/nodejs/nodejs-project-structure","title":"How do you structure a NodeJS project?","description":"A Node.js project should have a clear and organized file and directory structure, with a well-defined entry point (usually a file called index.js or server.js). It should also have a package.json file that defines the dependencies and scripts for the project.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-reactor-pattern":{"id":"questions/nodejs/nodejs-reactor-pattern","title":"What is Reactor Pattern?","description":"The Reactor pattern is a design pattern used in Node.js to handle asynchronous I/O operations. It is a concurrency pattern that provides a mechanism to demultiplex and dispatch service requests that are delivered to an application by one or more clients. The pattern defines a non-blocking event-driven architecture that abstracts the handling of multiple input events through the use of a central demultiplexing mechanism, such as an event loop. The event loop waits for events to occur on a set of registered handles, and then dispatches the appropriate event handlers to handle those events.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-routing":{"id":"questions/nodejs/nodejs-routing","title":"How does routing work in NodeJS?","description":"Routing defines the way in which the client requests are handled by the application endpoints. We define routing using methods of the Express app object that correspond to HTTP methods; for example,\xa0app.get()\xa0to handle\xa0GET\xa0requests and\xa0app.post\xa0to handle\xa0POST\xa0requests,\xa0app.all()\xa0to handle all HTTP methods and\xa0app.use()\xa0to specify middleware as the callback function.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-stream":{"id":"questions/nodejs/nodejs-stream","title":"What is a Stream in NodeJS?","description":"Stream is the collection of data similar to arrays and strings. They are objects using which you can read data from a source or write data to a destination in a continuous manner. It might not be available at once and need not to have fit in the memory. These streams are especially useful for reading and processing a large set of data.","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-stub":{"id":"questions/nodejs/nodejs-stub","title":"Explain the concept of stub in NodeJS","description":"In Node.js, stubs are basically the programs or functions that are used for stimulating the module or component behavior. During any test cases, stubs provide the canned answers of the functions","sidebar":"tutorialSidebar"},"questions/nodejs/nodejs-time":{"id":"questions/nodejs/nodejs-time","title":"List down the various timing features of NodeJS","description":"Node.js provides a Timers module which contains various functions for executing the code after a specified period of time.","sidebar":"tutorialSidebar"},"questions/nodejs/package-json":{"id":"questions/nodejs/package-json","title":"What is the package.json?","description":"package.json is a file that is used to define the properties of a Node.js package. It is typically located in the root directory of a project, and it contains information such as the package\'s name, version, dependencies, scripts, and other metadata.","sidebar":"tutorialSidebar"},"questions/nodejs/package-lock-json":{"id":"questions/nodejs/package-lock-json","title":"What is the role of the package-lock.json?","description":"It stores and guarantees the exact same version of every package.","sidebar":"tutorialSidebar"},"questions/nodejs/process-vs-thread":{"id":"questions/nodejs/process-vs-thread","title":"What is the diff between process vs threads in NodeJS?","description":"1. Process:","sidebar":"tutorialSidebar"},"questions/nodejs/put-vs-patch":{"id":"questions/nodejs/put-vs-patch","title":"What is the diff between put vs patch?","description":"PUT and PATCH are HTTP verbs and they both relate to updating a resource. The main difference between PUT and PATCH requests are in the way the server processes the enclosed entity to modify the resource identified by the Request-URI.","sidebar":"tutorialSidebar"},"questions/nodejs/repl":{"id":"questions/nodejs/repl","title":"Explain\xa0REPL in the context of NodeJS","description":"REPL stands for \\"Read-Eval-Print Loop\\". It is a simple, interactive programming environment that allows you to execute code snippets and see the results immediately.","sidebar":"tutorialSidebar"},"questions/nodejs/spawn-vs-fork":{"id":"questions/nodejs/spawn-vs-fork","title":"What is the diff between spawn and fork methods?","description":"The spawn() and fork() methods in Node.js are both used to create new child processes, but they work in slightly different ways:","sidebar":"tutorialSidebar"},"questions/nodejs/tilde-and-carret-packge-json":{"id":"questions/nodejs/tilde-and-carret-packge-json","title":"What are tilde(~) and caret(^) in package.json?","description":"-   ~version - Approximately equivalent to version, i.e., only accept new\xa0patch\xa0versions","sidebar":"tutorialSidebar"},"questions/nodejs/what-is-nodejs":{"id":"questions/nodejs/what-is-nodejs","title":"What is NodeJS?","description":"Node.js is a runtime environment for executing JavaScript code outside a browser. Node.js is built on top of the Google Chrome V8 JavaScript engine. It allows developers to run JavaScript on the server side with creating server-side applications.","sidebar":"tutorialSidebar"},"questions/reactjs/class-vs-functional-components":{"id":"questions/reactjs/class-vs-functional-components","title":"What is the diff between class vs functional components?","description":"-   The class component uses ES6 class syntax, and it extends React components with a render method that returns React elements.","sidebar":"tutorialSidebar"},"questions/reactjs/controlled-vs-uncontrolled-components":{"id":"questions/reactjs/controlled-vs-uncontrolled-components","title":"What are controlled and uncontrolled components?","description":"A component that controls the input elements within the forms on subsequent user input is called\xa0Controlled Component, i.e, every state mutation will have an associated handler function.","sidebar":"tutorialSidebar"},"questions/reactjs/dangerously-set-inner-html":{"id":"questions/reactjs/dangerously-set-inner-html","title":"How to use `innerHTML` in React?","description":"The\xa0dangerouslySetInnerHTML\xa0attribute is React\'s replacement for using\xa0innerHTML\xa0in the browser DOM. Just like\xa0innerHTML, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a\xa0html\xa0object as key and HTML text as value.","sidebar":"tutorialSidebar"},"questions/reactjs/higher-order-component":{"id":"questions/reactjs/higher-order-component","title":"What is a higher order component?","description":"A higher-order component is a function that takes a component and returns a new component. HOC\'s allow you to reuse code, logic and bootstrap abstraction.","sidebar":"tutorialSidebar"},"questions/reactjs/how-to-update-component-every-second":{"id":"questions/reactjs/how-to-update-component-every-second","title":"How to update a component every second?","description":"You need to use\xa0setInterval()\xa0to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.","sidebar":"tutorialSidebar"},"questions/reactjs/index":{"id":"questions/reactjs/index","title":"ReactJS Questions","description":"Core","sidebar":"tutorialSidebar"},"questions/reactjs/jsx":{"id":"questions/reactjs/jsx","title":"What is JSX?","description":"JSX is a syntax extension to JavaScript and comes with the full power of JavaScript. JSX produces React elements. You can embed any JavaScript expression in JSX by wrapping it in curly braces. After compilation, JSX expressions become regular JavaScript objects.","sidebar":"tutorialSidebar"},"questions/reactjs/key-prop":{"id":"questions/reactjs/key-prop","title":"Why to use `key` prop for list items?","description":"Keys are very important in lists for the following reasons:","sidebar":"tutorialSidebar"},"questions/reactjs/presentational-vs-container-components":{"id":"questions/reactjs/presentational-vs-container-components","title":"What is the diff between Presentational vs Container components?","description":"Presentational components are concerned with how things look. They generally receive data and callbacks exclusively via props. These components rarely have their own state, but when they do, it generally concerns UI state, as opposed to data state.","sidebar":"tutorialSidebar"},"questions/reactjs/react-error-boundaries":{"id":"questions/reactjs/react-error-boundaries","title":"What are error boundaries in React?","description":"Error boundaries\xa0are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.","sidebar":"tutorialSidebar"},"questions/reactjs/react-fiber":{"id":"questions/reactjs/react-fiber","title":"What is React Fiber?","description":"Fiber is the new\xa0reconciliation\xa0engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.","sidebar":"tutorialSidebar"},"questions/reactjs/react-fragment":{"id":"questions/reactjs/react-fragment","title":"What is a React.Fragment `</>`?","description":"It\'s a common pattern in React which is used for a component to return multiple elements.\xa0Fragments\xa0let you group a list of children without adding extra nodes to the DOM.","sidebar":"tutorialSidebar"},"questions/reactjs/react-hook-rules":{"id":"questions/reactjs/react-hook-rules","title":"What rules need to be followed for hooks?","description":"You need to follow two rules in order to use hooks:","sidebar":"tutorialSidebar"},"questions/reactjs/react-hooks":{"id":"questions/reactjs/react-hooks","title":"Explain React Hooks","description":"Hooks let you use more of React\u2019s features without having to use classes. The first hook that you will most likely encounter is useState. useState is a Hook that lets you add React state to function components. It returns an array with a getter and a setter.","sidebar":"tutorialSidebar"},"questions/reactjs/react-lazy":{"id":"questions/reactjs/react-lazy","title":"What is React lazy function?","description":"The\xa0React.lazy\xa0function lets you render a dynamic import as a regular component. It will automatically load the bundle containing the\xa0OtherComponent\xa0when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component.","sidebar":"tutorialSidebar"},"questions/reactjs/react-portal":{"id":"questions/reactjs/react-portal","title":"What are portals in React?","description":"Portal\xa0is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.","sidebar":"tutorialSidebar"},"questions/reactjs/react-router":{"id":"questions/reactjs/react-router","title":"What is React Router?","description":"React Router is a routing library built on top of React, which is used to create routes in a React application. This is one of the most frequently asked react interview questions.","sidebar":"tutorialSidebar"},"questions/reactjs/reactjs-app-perfomance":{"id":"questions/reactjs/reactjs-app-perfomance","title":"How can you optimize performance in a ReactJS app?","description":"-   One way is to use the shouldComponentUpdate lifecycle method to prevent unnecessary re-renders of a component.","sidebar":"tutorialSidebar"},"questions/reactjs/reactjs-bind-methods":{"id":"questions/reactjs/reactjs-bind-methods","title":"How to bind methods in JSX callbacks?","description":"There are 3 possible ways (except libraries, like @bind decorator) to achieve this:","sidebar":"tutorialSidebar"},"questions/reactjs/reactjs-context":{"id":"questions/reactjs/reactjs-context","title":"What is React Context?","description":"Context\xa0provides a way to pass data through the component tree without having to pass props down manually at every level.","sidebar":"tutorialSidebar"},"questions/reactjs/reactjs-element-vs-component":{"id":"questions/reactjs/reactjs-element-vs-component","title":"What is the diff Element vs Component?","description":"An\xa0Element\xa0is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components.\xa0Elements\xa0can contain other\xa0Elements\xa0in their props. Creating a React element is cheap. Once an element is created, it is never mutated.","sidebar":"tutorialSidebar"},"questions/reactjs/reactjs-lifecycle":{"id":"questions/reactjs/reactjs-lifecycle","title":"Explain a ReactJS lifecycle","description":"The component lifecycle has three distinct lifecycle phases:","sidebar":"tutorialSidebar"},"questions/reactjs/reactjs-refs":{"id":"questions/reactjs/reactjs-refs","title":"What is ReactJS `ref`?","description":"Refs are used to get reference to a DOM node or an instance of a component in React. Good examples of when to use refs are for managing focus/text selection, triggering imperative animations, or integrating with third-party DOM libraries. You should avoid using string refs and inline ref callbacks. Callback refs are advised by React.","sidebar":"tutorialSidebar"},"questions/reactjs/redux":{"id":"questions/reactjs/redux","title":"What is Redux?","description":"Redux is an open-source, JavaScript library used to manage the application state. React uses Redux to build the user interface. It is a predictable state container for JavaScript applications and is used for the entire application\u2019s state management.","sidebar":"tutorialSidebar"},"questions/reactjs/redux-saga-vs-thunk":{"id":"questions/reactjs/redux-saga-vs-thunk","title":"What are the diff\xa0`redux-saga`\xa0vs\xa0`redux-thunk`?","description":"Both\xa0Redux Thunk\xa0and\xa0Redux Saga\xa0take care of dealing with side effects. In most of the scenarios, Thunk uses\xa0Promises\xa0to deal with them, whereas Saga uses\xa0Generators. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.","sidebar":"tutorialSidebar"},"questions/reactjs/state-vs-props":{"id":"questions/reactjs/state-vs-props","title":"What is the diff between state vs props?","description":"The key difference between props and state is that state is internal and controlled by the component itself while props are external and controlled by whatever renders the component.","sidebar":"tutorialSidebar"},"questions/reactjs/synthetic-event":{"id":"questions/reactjs/synthetic-event","title":"What is the SyntheticEvent in ReactJS?","description":"Your event handlers will be passed instances of\xa0SyntheticEvent, a cross-browser wrapper around the browser\u2019s native event","sidebar":"tutorialSidebar"},"questions/reactjs/this-set-state":{"id":"questions/reactjs/this-set-state","title":"Explain usage of `this.setState`","description":"If you try to update the state directly, then it won\'t re-render the component.","sidebar":"tutorialSidebar"},"questions/reactjs/use-deffered-value-hook":{"id":"questions/reactjs/use-deffered-value-hook","title":"How to use `useDeferredValue` hook?","description":"-   useDeferredValue is a React Hook that lets you defer updating a part of the UI.","sidebar":"tutorialSidebar"},"questions/reactjs/use-effect-hook":{"id":"questions/reactjs/use-effect-hook","title":"What is `useEffect` hook?","description":"The useEffect hook is used for performing side effects in functional components. This can include things like data fetching, setting up subscriptions, or manually changing the DOM. The useEffect hook is called after the component renders, and can be used to ensure that your component stays up-to-date with any relevant data or dependencies.","sidebar":"tutorialSidebar"},"questions/reactjs/use-memo-vs-use-callback":{"id":"questions/reactjs/use-memo-vs-use-callback","title":"What is the diff between `useMemo` vs `useCallback` hooks?","description":"-   useCallback gives you referential equality between renders for functions. And useMemo gives you referential equality between renders for values.","sidebar":"tutorialSidebar"},"questions/reactjs/use-state-vs-use-ref":{"id":"questions/reactjs/use-state-vs-use-ref","title":"What is the diff `useState` vs `useRef`?","description":"1. useState causes components to re-render after state updates whereas useRef doesn\u2019t cause a component to re-render when the value or state changes. Essentially, useRef is like a \u201cbox\u201d that can hold a mutable value in its (.current) property.","sidebar":"tutorialSidebar"},"questions/reactjs/virtual-dom":{"id":"questions/reactjs/virtual-dom","title":"Why to use virtual DOM?","description":"Virtual DOM (VDOM):\xa0React keeps a lightweight representation of the real DOM in the memory, and that is known as the virtual DOM. When the state of an object changes, the virtual DOM changes only that object in the real DOM, rather than updating all the objects.","sidebar":"tutorialSidebar"},"questions/reactjs/what-is-reactjs":{"id":"questions/reactjs/what-is-reactjs","title":"What is ReactJS?","description":"React creates a virtual DOM. When the state changes in a component, it first runs a \\"diffing\\" algorithm, which identifies what has changed in the virtual DOM. The second step is reconciliation, where it updates the DOM with the results of diff.","sidebar":"tutorialSidebar"},"questions/reactjs/when-use-class-component":{"id":"questions/reactjs/when-use-class-component","title":"When to use a Class over a Function component?","description":"If the component needs\xa0state or lifecycle methods\xa0then use class component, otherwise use function component.","sidebar":"tutorialSidebar"},"questions/typescript/abstract-class":{"id":"questions/typescript/abstract-class","title":"What is an abstract class?","description":"It is a class that cannot be instantiated directly, and that is intended to be used as a base class for one or more derived classes. Abstract classes are used to define the common behavior and the shared structure of a group of related classes, and they provide a way to implement inheritance and polymorphism in TypeScript.","sidebar":"tutorialSidebar"},"questions/typescript/any-vs-unknown":{"id":"questions/typescript/any-vs-unknown","title":"Explain `any` vs `unknown`","description":"In some situations, not all type information is available, or its declaration would take an inappropriate amount of effort. These may occur for values from code that has been written without TypeScript or a 3rd party library. In these cases, we might want to opt-out of type checking. To do so, we label these values with the\xa0any\xa0type:","sidebar":"tutorialSidebar"},"questions/typescript/conditional-type":{"id":"questions/typescript/conditional-type","title":"What is conditional type and how to create?","description":"Conditional types are a powerful and flexible way to create complex and dynamic types in TypeScript, and they can be used in a variety of scenarios to model the behavior and the structure of a type. They are particularly useful for creating generic types that can adapt to different types or conditions, and for creating types that can model the conditional behavior of a value or an expression.","sidebar":"tutorialSidebar"},"questions/typescript/enum-type":{"id":"questions/typescript/enum-type","title":"What is `enum` and why to use?","description":"enum is a way to define a set of related values that can be used to represent a specific set of choices or options. An enum is a named group of constants, and it allows you to create a set of named values that can be used to represent a specific set of choices or options.","sidebar":"tutorialSidebar"},"questions/typescript/enum-vs-const":{"id":"questions/typescript/enum-vs-const","title":"What is difference between enum vs const?","description":"There are some differences between using an enum and a const object to define a set of related values in TypeScript:","sidebar":"tutorialSidebar"},"questions/typescript/index":{"id":"questions/typescript/index","title":"Typescript Questions","description":"{[","sidebar":"tutorialSidebar"},"questions/typescript/interface-vs-type":{"id":"questions/typescript/interface-vs-type","title":"Interfaces vs Types","description":"-   different syntax","sidebar":"tutorialSidebar"},"questions/typescript/never-type":{"id":"questions/typescript/never-type","title":"Why and how to use `never`?","description":"The never type is used to represent values that are never expected to occur or that are not intended to be used, such as the result of a function that always throws an exception or an infinite loop that never returns.","sidebar":"tutorialSidebar"},"questions/typescript/ts-as":{"id":"questions/typescript/ts-as","title":"What is `as` syntax in TypeScript?","description":"The as syntax in TypeScript is used to perform type assertions, which allow you to override the type of a value and tell the compiler that you know the type of the value more specifically. Type assertions are a way to provide additional type information to the compiler, and they can be useful when you want to narrow the type of a value or when you want to use a value in a context where the compiler cannot infer the correct type.","sidebar":"tutorialSidebar"},"questions/typescript/ts-declare":{"id":"questions/typescript/ts-declare","title":"What is the `declare` keyword in TypeScript?","description":"The declare keyword in TypeScript is used to tell the compiler that a given symbol is already defined elsewhere, and that it should not try to generate any code for it. This is commonly used for ambient declarations, which are declarations that are not meant to be implemented, but rather to provide a type and/or shape for the code that is using them.","sidebar":"tutorialSidebar"},"questions/typescript/ts-decorator":{"id":"questions/typescript/ts-decorator","title":"What is a decorator?","description":"In TypeScript, decorators are a way to add additional behavior to classes, methods, properties, and other elements of the code. Decorators are functions that are invoked with a special syntax, and they can be used to modify or extend the behavior of the decorated element in various ways.","sidebar":"tutorialSidebar"},"questions/typescript/ts-generics":{"id":"questions/typescript/ts-generics","title":"What is a generic type?","description":"In TypeScript, generics are a way to create flexible and reusable code that can work with multiple types. Generics allow you to define a function, class, interface, or type that can accept one or more type parameters, which represent the types of the arguments, properties, or other elements of the code.","sidebar":"tutorialSidebar"},"questions/typescript/ts-implement":{"id":"questions/typescript/ts-implement","title":"What is `implement` clause?","description":"It is used to specify that a class or an object implements an interface or a class. An interface is a type that defines a set of properties, methods, and events that a class or an object must have or must implement. A class is a blueprint for creating objects, and it can define the structure and the behavior of the objects it creates.","sidebar":"tutorialSidebar"},"questions/typescript/ts-mixin":{"id":"questions/typescript/ts-mixin","title":"What is ts Mixin?","description":"Mixins are a way to reuse a set of functions or properties in multiple classes, without using inheritance or composition. Mixins allow you to define a common behavior or functionality that can be shared by multiple classes, and they can be used to avoid duplication and to create more modular and flexible code.","sidebar":"tutorialSidebar"},"questions/typescript/ts-namespace":{"id":"questions/typescript/ts-namespace","title":"What is `namespace` and how to declare it?","description":"In TypeScript, a namespace is a way to organize and group related code under a single name. Namespaces allow you to define and expose a set of variables, functions, classes, and other types of symbols, and to prevent naming conflicts and collisions with other code.","sidebar":"tutorialSidebar"},"questions/typescript/ts-overloading":{"id":"questions/typescript/ts-overloading","title":"Function overloading typescript","description":"Function overloading in TypeScript allows you to define multiple versions of a function with different types and numbers of parameters. This can be useful when you want to provide different behavior or functionality depending on the input to the function.","sidebar":"tutorialSidebar"},"questions/typescript/ts-public-private-protected":{"id":"questions/typescript/ts-public-private-protected","title":"Tell about public vs private vs protected","description":"In TypeScript, there are three access modifiers that can be used to control the visibility and accessibility of class members (fields and methods):","sidebar":"tutorialSidebar"},"questions/typescript/ts-typeof":{"id":"questions/typescript/ts-typeof","title":"What is `typeof` operator?","description":"The typeof returns a type of given value.","sidebar":"tutorialSidebar"},"questions/typescript/tsconfig-file":{"id":"questions/typescript/tsconfig-file","title":"What is the use of the tsconfig.json?","description":"The tsconfig.json file is a JSON format file where you may specify several options to inform the compiler how to compile a project. The presence of this file in the directory implies that it is the TypeScript project root.","sidebar":"tutorialSidebar"},"questions/typescript/typescript-benefits":{"id":"questions/typescript/typescript-benefits","title":"What ts benefits you know?","description":"Benefits of using TypeScript include:","sidebar":"tutorialSidebar"},"questions/typescript/union-intersection":{"id":"questions/typescript/union-intersection","title":"Describe Unions and Intersection Types","description":"In TypeScript, union types and intersection types are ways to specify multiple types for a single value.","sidebar":"tutorialSidebar"},"questions/typescript/utility-types":{"id":"questions/typescript/utility-types","title":"What utility types exist and their usage","description":"TypeScript provides a set of utility types that can be used to create and manipulate types in a more expressive and flexible way. Some of the utility types provided by TypeScript are:","sidebar":"tutorialSidebar"},"questions/typescript/void-vs-undefined":{"id":"questions/typescript/void-vs-undefined","title":"Explain `void` vs `undefined`","description":"In TypeScript, void is a type that represents the absence of a value (the value is not important).","sidebar":"tutorialSidebar"},"questions/typescript/what-is-typescript":{"id":"questions/typescript/what-is-typescript","title":"What is TypeScript?","description":"TypeScript is a programming language that is based on JavaScript, and it is designed to add optional static typing and other features to JavaScript. TypeScript is a typed superset of JavaScript, which means that any valid JavaScript code is also valid TypeScript code, and TypeScript adds additional features and syntax to the language.","sidebar":"tutorialSidebar"}}}')}}]);